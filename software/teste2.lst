
teste2.elf:     file format elf32-bigarm

Disassembly of section .text:

00000000 <start>:
   0:	e10f1000 	mrs	r1, CPSR
   4:	e3c11080 	bic	r1, r1, #128	; 0x80
   8:	e121f001 	msr	CPSR_c, r1
   c:	eb000000 	bl	14 <main>

00000010 <loop>:
  10:	eafffffe 	b	10 <loop>

00000014 <main>:
	int i, j;
	struct ArkeOutputInterface arke_oif;
	
	int stall_go_in;
	stall_go_in = ((GPIO_IN>>10) & 0x1);
  14:	e3e01a01 	mvn	r1, #4096	; 0x1000
	
	// init
	arke_oif.data_out = 0;
	arke_oif.eop_out = 0; 
	arke_oif.tx = 0;
	arke_oif.stall_go_out = 1;
	
	GPIO_OUT = TO_INTEGER(arke_oif);
  18:	e3a02b01 	mov	r2, #1024	; 0x400
  1c:	e5113fdb 	ldr	r3, [r1, #-4059]
  20:	e5012fdf 	str	r2, [r1, #-4063]
	
	// header
	arke_oif.data_out = 3;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
  24:	e5113fdb 	ldr	r3, [r1, #-4059]
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
  28:	e3130b01 	tst	r3, #1024	; 0x400
  2c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  30:	1a000003 	bne	44 <main+0x30>
  34:	e1a02001 	mov	r2, r1
  38:	e5123fdb 	ldr	r3, [r2, #-4059]
  3c:	e3130b01 	tst	r3, #1024	; 0x400
  40:	0afffffc 	beq	38 <main+0x24>
	GPIO_OUT = TO_INTEGER(arke_oif);
  44:	e3a03c06 	mov	r3, #1536	; 0x600
	
	arke_oif.tx = 0;
	
	GPIO_OUT = TO_INTEGER(arke_oif);
  48:	e3a02b01 	mov	r2, #1024	; 0x400
  4c:	e3e01a01 	mvn	r1, #4096	; 0x1000
  50:	e2833003 	add	r3, r3, #3	; 0x3
  54:	e2822003 	add	r2, r2, #3	; 0x3
  58:	e5013fdf 	str	r3, [r1, #-4063]
  5c:	e5012fdf 	str	r2, [r1, #-4063]
	
	// starting line address
	arke_oif.data_out = 0;
	arke_oif.tx = 1;

	stall_go_in = ((GPIO_IN>>10) & 0x1);
  60:	e5113fdb 	ldr	r3, [r1, #-4059]
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
  64:	e3130b01 	tst	r3, #1024	; 0x400
  68:	1a000003 	bne	7c <main+0x68>
  6c:	e1a02001 	mov	r2, r1
  70:	e5123fdb 	ldr	r3, [r2, #-4059]
  74:	e3130b01 	tst	r3, #1024	; 0x400
  78:	0afffffc 	beq	70 <main+0x5c>
	GPIO_OUT = TO_INTEGER(arke_oif);
  7c:	e3e01a01 	mvn	r1, #4096	; 0x1000
  80:	e3a03c06 	mov	r3, #1536	; 0x600
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
  84:	e3a02b01 	mov	r2, #1024	; 0x400
  88:	e5013fdf 	str	r3, [r1, #-4063]
  8c:	e5012fdf 	str	r2, [r1, #-4063]
	
	// starting column address
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
  90:	e5113fdb 	ldr	r3, [r1, #-4059]
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
  94:	e3130b01 	tst	r3, #1024	; 0x400
  98:	1a000003 	bne	ac <main+0x98>
  9c:	e1a02001 	mov	r2, r1
  a0:	e5123fdb 	ldr	r3, [r2, #-4059]
  a4:	e3130b01 	tst	r3, #1024	; 0x400
  a8:	0afffffc 	beq	a0 <main+0x8c>
	GPIO_OUT = TO_INTEGER(arke_oif);
  ac:	e3e01a01 	mvn	r1, #4096	; 0x1000
  b0:	e3a03c06 	mov	r3, #1536	; 0x600
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
  b4:	e3a02b01 	mov	r2, #1024	; 0x400
  b8:	e5013fdf 	str	r3, [r1, #-4063]
  bc:	e5012fdf 	str	r2, [r1, #-4063]
	
	// height
	arke_oif.data_out = HEIGHT;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
  c0:	e5113fdb 	ldr	r3, [r1, #-4059]
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
  c4:	e3130b01 	tst	r3, #1024	; 0x400
  c8:	1a000003 	bne	dc <main+0xc8>
  cc:	e1a02001 	mov	r2, r1
  d0:	e5123fdb 	ldr	r3, [r2, #-4059]
  d4:	e3130b01 	tst	r3, #1024	; 0x400
  d8:	0afffffc 	beq	d0 <main+0xbc>
	GPIO_OUT = TO_INTEGER(arke_oif);
  dc:	e3a03e63 	mov	r3, #1584	; 0x630
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
  e0:	e3a02e43 	mov	r2, #1072	; 0x430
  e4:	e3e01a01 	mvn	r1, #4096	; 0x1000
  e8:	e2833002 	add	r3, r3, #2	; 0x2
  ec:	e2822002 	add	r2, r2, #2	; 0x2
  f0:	e5013fdf 	str	r3, [r1, #-4063]
  f4:	e5012fdf 	str	r2, [r1, #-4063]
	
	// width
	arke_oif.data_out = WIDTH;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
  f8:	e5113fdb 	ldr	r3, [r1, #-4059]
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
  fc:	e3130b01 	tst	r3, #1024	; 0x400
 100:	1a000003 	bne	114 <main+0x100>
 104:	e1a02001 	mov	r2, r1
 108:	e5123fdb 	ldr	r3, [r2, #-4059]
 10c:	e3130b01 	tst	r3, #1024	; 0x400
 110:	0afffffc 	beq	108 <main+0xf4>
	GPIO_OUT = TO_INTEGER(arke_oif);
 114:	e3a03e63 	mov	r3, #1584	; 0x630
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
 118:	e3a02e43 	mov	r2, #1072	; 0x430
 11c:	e3e01a01 	mvn	r1, #4096	; 0x1000
 120:	e2833002 	add	r3, r3, #2	; 0x2
 124:	e2822002 	add	r2, r2, #2	; 0x2
 128:	e3a07000 	mov	r7, #0	; 0x0
 12c:	e5013fdf 	str	r3, [r1, #-4063]
 130:	e59f6614 	ldr	r6, [pc, #1556]	; 74c <.text+0x74c>
 134:	e5012fdf 	str	r2, [r1, #-4063]
 138:	e1a04007 	mov	r4, r7
			
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {			
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			if(i == (HEIGHT-1) && (j == WIDTH-1)) {
				arke_oif.eop_out = 1;
			}
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			if(i == (HEIGHT-1) && (j == WIDTH-1)) {
				arke_oif.eop_out = 0;
			}
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	// header
	arke_oif.data_out = 3;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting line address
	arke_oif.data_out = 100;
	arke_oif.tx = 1;

	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting column address
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// height
	arke_oif.data_out = HEIGHT;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// width
	arke_oif.data_out = WIDTH;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			if(i == (HEIGHT-1) && (j == WIDTH-1)) {
				arke_oif.eop_out = 1;
			}
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			if(i == (HEIGHT-1) && (j == WIDTH-1)) {
				arke_oif.eop_out = 0;
			}
		
			GPIO_OUT = TO_INTEGER(arke_oif);
		}
	}
	
	// header
	arke_oif.data_out = 3;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting line address
	arke_oif.data_out = 100;
	arke_oif.tx = 1;

	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting column address
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// height
	arke_oif.data_out = HEIGHT;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// width
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
			
	// pixel
	
	arke_oif.data_out = 200;
									
	arke_oif.tx = 1;
	arke_oif.eop_out = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	arke_oif.eop_out = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// header
	arke_oif.data_out = 3;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting line address
	arke_oif.data_out = 200;
	arke_oif.tx = 1;

	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting column address
	arke_oif.data_out = 200;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// height
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// width
	arke_oif.data_out = WIDTH;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
			
	// pixel
	
	arke_oif.data_out = 100;
									
	arke_oif.tx = 1;
	arke_oif.eop_out = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	arke_oif.eop_out = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// header
	arke_oif.data_out = 3;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting line address
	arke_oif.data_out = 220;
	arke_oif.tx = 1;

	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// starting column address
	arke_oif.data_out = 10;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// height
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
	
	// width
	arke_oif.data_out = 0;
	arke_oif.tx = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
			
	// pixel
	
	arke_oif.data_out = 50;
									
	arke_oif.tx = 1;
	arke_oif.eop_out = 1;
	
	stall_go_in = ((GPIO_IN>>10) & 0x1);
	while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
	GPIO_OUT = TO_INTEGER(arke_oif);
	
	arke_oif.tx = 0;
	arke_oif.eop_out = 0;

	GPIO_OUT = TO_INTEGER(arke_oif);
 13c:	e3570031 	cmp	r7, #49	; 0x31
 140:	13a05000 	movne	r5, #0	; 0x0
 144:	03a05001 	moveq	r5, #1	; 0x1
 148:	e3a01000 	mov	r1, #0	; 0x0
 14c:	e3e02a01 	mvn	r2, #4096	; 0x1000
 150:	e5123fdb 	ldr	r3, [r2, #-4059]
 154:	e3510031 	cmp	r1, #49	; 0x31
 158:	13a00000 	movne	r0, #0	; 0x0
 15c:	02050001 	andeq	r0, r5, #1	; 0x1
 160:	e3500000 	cmp	r0, #0	; 0x0
 164:	13a04001 	movne	r4, #1	; 0x1
 168:	e3130b01 	tst	r3, #1024	; 0x400
 16c:	e7d1e006 	ldrb	lr, [r1, r6]
 170:	1a000002 	bne	180 <main+0x16c>
 174:	e5123fdb 	ldr	r3, [r2, #-4059]
 178:	e3130b01 	tst	r3, #1024	; 0x400
 17c:	0afffffc 	beq	174 <main+0x160>
 180:	e1a0c404 	mov	ip, r4, lsl #8
 184:	e38c3c06 	orr	r3, ip, #1536	; 0x600
 188:	e183300e 	orr	r3, r3, lr
 18c:	e3500000 	cmp	r0, #0	; 0x0
 190:	e1a03a83 	mov	r3, r3, lsl #21
 194:	e1a03aa3 	mov	r3, r3, lsr #21
 198:	e3e02a01 	mvn	r2, #4096	; 0x1000
 19c:	13a00b01 	movne	r0, #1024	; 0x400
 1a0:	038c0b01 	orreq	r0, ip, #1024	; 0x400
 1a4:	e5023fdf 	str	r3, [r2, #-4063]
 1a8:	e180300e 	orr	r3, r0, lr
 1ac:	13a04000 	movne	r4, #0	; 0x0
 1b0:	e1a03a83 	mov	r3, r3, lsl #21
 1b4:	e2811001 	add	r1, r1, #1	; 0x1
 1b8:	11a0c004 	movne	ip, r4
 1bc:	e1a03aa3 	mov	r3, r3, lsr #21
 1c0:	e3e02a01 	mvn	r2, #4096	; 0x1000
 1c4:	e3510032 	cmp	r1, #50	; 0x32
 1c8:	e5023fdf 	str	r3, [r2, #-4063]
 1cc:	1affffde 	bne	14c <main+0x138>
 1d0:	e2877001 	add	r7, r7, #1	; 0x1
 1d4:	e3570032 	cmp	r7, #50	; 0x32
 1d8:	e2866032 	add	r6, r6, #50	; 0x32
 1dc:	1affffd6 	bne	13c <main+0x128>
 1e0:	e5123fdb 	ldr	r3, [r2, #-4059]
 1e4:	e3130b01 	tst	r3, #1024	; 0x400
 1e8:	0afffffc 	beq	1e0 <main+0x1cc>
 1ec:	e38ccc06 	orr	ip, ip, #1536	; 0x600
 1f0:	e38c3003 	orr	r3, ip, #3	; 0x3
 1f4:	e3802003 	orr	r2, r0, #3	; 0x3
 1f8:	e1a03a83 	mov	r3, r3, lsl #21
 1fc:	e1a02a82 	mov	r2, r2, lsl #21
 200:	e3e01a01 	mvn	r1, #4096	; 0x1000
 204:	e1a03aa3 	mov	r3, r3, lsr #21
 208:	e1a02aa2 	mov	r2, r2, lsr #21
 20c:	e5013fdf 	str	r3, [r1, #-4063]
 210:	e5012fdf 	str	r2, [r1, #-4063]
 214:	e5113fdb 	ldr	r3, [r1, #-4059]
 218:	e3130b01 	tst	r3, #1024	; 0x400
 21c:	1a000003 	bne	230 <main+0x21c>
 220:	e1a02001 	mov	r2, r1
 224:	e5123fdb 	ldr	r3, [r2, #-4059]
 228:	e3130b01 	tst	r3, #1024	; 0x400
 22c:	0afffffc 	beq	224 <main+0x210>
 230:	e38c3064 	orr	r3, ip, #100	; 0x64
 234:	e3802064 	orr	r2, r0, #100	; 0x64
 238:	e1a03a83 	mov	r3, r3, lsl #21
 23c:	e1a02a82 	mov	r2, r2, lsl #21
 240:	e3e01a01 	mvn	r1, #4096	; 0x1000
 244:	e1a03aa3 	mov	r3, r3, lsr #21
 248:	e1a02aa2 	mov	r2, r2, lsr #21
 24c:	e5013fdf 	str	r3, [r1, #-4063]
 250:	e5012fdf 	str	r2, [r1, #-4063]
 254:	e5113fdb 	ldr	r3, [r1, #-4059]
 258:	e3130b01 	tst	r3, #1024	; 0x400
 25c:	1a000003 	bne	270 <main+0x25c>
 260:	e1a02001 	mov	r2, r1
 264:	e5123fdb 	ldr	r3, [r2, #-4059]
 268:	e3130b01 	tst	r3, #1024	; 0x400
 26c:	0afffffc 	beq	264 <main+0x250>
 270:	e1a03a8c 	mov	r3, ip, lsl #21
 274:	e1a02a80 	mov	r2, r0, lsl #21
 278:	e3e01a01 	mvn	r1, #4096	; 0x1000
 27c:	e1a03aa3 	mov	r3, r3, lsr #21
 280:	e1a02aa2 	mov	r2, r2, lsr #21
 284:	e5013fdf 	str	r3, [r1, #-4063]
 288:	e5012fdf 	str	r2, [r1, #-4063]
 28c:	e5113fdb 	ldr	r3, [r1, #-4059]
 290:	e3130b01 	tst	r3, #1024	; 0x400
 294:	1a000003 	bne	2a8 <main+0x294>
 298:	e1a02001 	mov	r2, r1
 29c:	e5123fdb 	ldr	r3, [r2, #-4059]
 2a0:	e3130b01 	tst	r3, #1024	; 0x400
 2a4:	0afffffc 	beq	29c <main+0x288>
 2a8:	e3802032 	orr	r2, r0, #50	; 0x32
 2ac:	e38c3032 	orr	r3, ip, #50	; 0x32
 2b0:	e1a00a83 	mov	r0, r3, lsl #21
 2b4:	e1a02a82 	mov	r2, r2, lsl #21
 2b8:	e3e01a01 	mvn	r1, #4096	; 0x1000
 2bc:	e1a00aa0 	mov	r0, r0, lsr #21
 2c0:	e1a02aa2 	mov	r2, r2, lsr #21
 2c4:	e5010fdf 	str	r0, [r1, #-4063]
 2c8:	e5012fdf 	str	r2, [r1, #-4063]
 2cc:	e5113fdb 	ldr	r3, [r1, #-4059]
 2d0:	e3130b01 	tst	r3, #1024	; 0x400
 2d4:	0afffffc 	beq	2cc <main+0x2b8>
 2d8:	e3e03a01 	mvn	r3, #4096	; 0x1000
 2dc:	e5030fdf 	str	r0, [r3, #-4063]
 2e0:	e59f6464 	ldr	r6, [pc, #1124]	; 74c <.text+0x74c>
 2e4:	e5032fdf 	str	r2, [r3, #-4063]
 2e8:	e3a07000 	mov	r7, #0	; 0x0
 2ec:	e3570031 	cmp	r7, #49	; 0x31
 2f0:	13a05000 	movne	r5, #0	; 0x0
 2f4:	03a05001 	moveq	r5, #1	; 0x1
 2f8:	e3a01000 	mov	r1, #0	; 0x0
 2fc:	e3e02a01 	mvn	r2, #4096	; 0x1000
 300:	e5123fdb 	ldr	r3, [r2, #-4059]
 304:	e3510031 	cmp	r1, #49	; 0x31
 308:	13a00000 	movne	r0, #0	; 0x0
 30c:	02050001 	andeq	r0, r5, #1	; 0x1
 310:	e3500000 	cmp	r0, #0	; 0x0
 314:	13a04001 	movne	r4, #1	; 0x1
 318:	e3130b01 	tst	r3, #1024	; 0x400
 31c:	e7d1e006 	ldrb	lr, [r1, r6]
 320:	1a000002 	bne	330 <main+0x31c>
 324:	e5123fdb 	ldr	r3, [r2, #-4059]
 328:	e3130b01 	tst	r3, #1024	; 0x400
 32c:	0afffffc 	beq	324 <main+0x310>
 330:	e1a0c404 	mov	ip, r4, lsl #8
 334:	e38c3c06 	orr	r3, ip, #1536	; 0x600
 338:	e183300e 	orr	r3, r3, lr
 33c:	e3500000 	cmp	r0, #0	; 0x0
 340:	e1a03a83 	mov	r3, r3, lsl #21
 344:	e1a03aa3 	mov	r3, r3, lsr #21
 348:	e3e02a01 	mvn	r2, #4096	; 0x1000
 34c:	13a00b01 	movne	r0, #1024	; 0x400
 350:	038c0b01 	orreq	r0, ip, #1024	; 0x400
 354:	e5023fdf 	str	r3, [r2, #-4063]
 358:	e180300e 	orr	r3, r0, lr
 35c:	13a0c000 	movne	ip, #0	; 0x0
 360:	e1a03a83 	mov	r3, r3, lsl #21
 364:	e2811001 	add	r1, r1, #1	; 0x1
 368:	11a0400c 	movne	r4, ip
 36c:	e1a03aa3 	mov	r3, r3, lsr #21
 370:	e3e02a01 	mvn	r2, #4096	; 0x1000
 374:	e3510032 	cmp	r1, #50	; 0x32
 378:	e5023fdf 	str	r3, [r2, #-4063]
 37c:	1affffde 	bne	2fc <main+0x2e8>
 380:	e2877001 	add	r7, r7, #1	; 0x1
 384:	e3570032 	cmp	r7, #50	; 0x32
 388:	e2866032 	add	r6, r6, #50	; 0x32
 38c:	1affffd6 	bne	2ec <main+0x2d8>
 390:	e5123fdb 	ldr	r3, [r2, #-4059]
 394:	e3130b01 	tst	r3, #1024	; 0x400
 398:	0afffffc 	beq	390 <main+0x37c>
 39c:	e38c4c06 	orr	r4, ip, #1536	; 0x600
 3a0:	e3843003 	orr	r3, r4, #3	; 0x3
 3a4:	e3802003 	orr	r2, r0, #3	; 0x3
 3a8:	e1a03a83 	mov	r3, r3, lsl #21
 3ac:	e1a02a82 	mov	r2, r2, lsl #21
 3b0:	e3e01a01 	mvn	r1, #4096	; 0x1000
 3b4:	e1a03aa3 	mov	r3, r3, lsr #21
 3b8:	e1a02aa2 	mov	r2, r2, lsr #21
 3bc:	e5013fdf 	str	r3, [r1, #-4063]
 3c0:	e5012fdf 	str	r2, [r1, #-4063]
 3c4:	e5113fdb 	ldr	r3, [r1, #-4059]
 3c8:	e3130b01 	tst	r3, #1024	; 0x400
 3cc:	1a000003 	bne	3e0 <main+0x3cc>
 3d0:	e1a02001 	mov	r2, r1
 3d4:	e5123fdb 	ldr	r3, [r2, #-4059]
 3d8:	e3130b01 	tst	r3, #1024	; 0x400
 3dc:	0afffffc 	beq	3d4 <main+0x3c0>
 3e0:	e3843064 	orr	r3, r4, #100	; 0x64
 3e4:	e3802064 	orr	r2, r0, #100	; 0x64
 3e8:	e1a03a83 	mov	r3, r3, lsl #21
 3ec:	e1a02a82 	mov	r2, r2, lsl #21
 3f0:	e3e01a01 	mvn	r1, #4096	; 0x1000
 3f4:	e1a03aa3 	mov	r3, r3, lsr #21
 3f8:	e1a02aa2 	mov	r2, r2, lsr #21
 3fc:	e5013fdf 	str	r3, [r1, #-4063]
 400:	e5012fdf 	str	r2, [r1, #-4063]
 404:	e5113fdb 	ldr	r3, [r1, #-4059]
 408:	e3130b01 	tst	r3, #1024	; 0x400
 40c:	1a000003 	bne	420 <main+0x40c>
 410:	e1a02001 	mov	r2, r1
 414:	e5123fdb 	ldr	r3, [r2, #-4059]
 418:	e3130b01 	tst	r3, #1024	; 0x400
 41c:	0afffffc 	beq	414 <main+0x400>
 420:	e1a0ea84 	mov	lr, r4, lsl #21
 424:	e1a0ca80 	mov	ip, r0, lsl #21
 428:	e3e02a01 	mvn	r2, #4096	; 0x1000
 42c:	e1a0eaae 	mov	lr, lr, lsr #21
 430:	e1a0caac 	mov	ip, ip, lsr #21
 434:	e502efdf 	str	lr, [r2, #-4063]
 438:	e502cfdf 	str	ip, [r2, #-4063]
 43c:	e5123fdb 	ldr	r3, [r2, #-4059]
 440:	e3130b01 	tst	r3, #1024	; 0x400
 444:	0afffffc 	beq	43c <main+0x428>
 448:	e3843032 	orr	r3, r4, #50	; 0x32
 44c:	e3802032 	orr	r2, r0, #50	; 0x32
 450:	e1a03a83 	mov	r3, r3, lsl #21
 454:	e1a02a82 	mov	r2, r2, lsl #21
 458:	e3e01a01 	mvn	r1, #4096	; 0x1000
 45c:	e1a03aa3 	mov	r3, r3, lsr #21
 460:	e1a02aa2 	mov	r2, r2, lsr #21
 464:	e5013fdf 	str	r3, [r1, #-4063]
 468:	e5012fdf 	str	r2, [r1, #-4063]
 46c:	e5113fdb 	ldr	r3, [r1, #-4059]
 470:	e3130b01 	tst	r3, #1024	; 0x400
 474:	1a000003 	bne	488 <main+0x474>
 478:	e1a02001 	mov	r2, r1
 47c:	e5123fdb 	ldr	r3, [r2, #-4059]
 480:	e3130b01 	tst	r3, #1024	; 0x400
 484:	0afffffc 	beq	47c <main+0x468>
 488:	e3e02a01 	mvn	r2, #4096	; 0x1000
 48c:	e502efdf 	str	lr, [r2, #-4063]
 490:	e502cfdf 	str	ip, [r2, #-4063]
 494:	e5123fdb 	ldr	r3, [r2, #-4059]
 498:	e3130b01 	tst	r3, #1024	; 0x400
 49c:	0afffffc 	beq	494 <main+0x480>
 4a0:	e3a03d1f 	mov	r3, #1984	; 0x7c0
 4a4:	e3a02d13 	mov	r2, #1216	; 0x4c0
 4a8:	e3e01a01 	mvn	r1, #4096	; 0x1000
 4ac:	e2833008 	add	r3, r3, #8	; 0x8
 4b0:	e2822008 	add	r2, r2, #8	; 0x8
 4b4:	e5013fdf 	str	r3, [r1, #-4063]
 4b8:	e5012fdf 	str	r2, [r1, #-4063]
 4bc:	e5113fdb 	ldr	r3, [r1, #-4059]
 4c0:	e3130b01 	tst	r3, #1024	; 0x400
 4c4:	1a000003 	bne	4d8 <main+0x4c4>
 4c8:	e1a02001 	mov	r2, r1
 4cc:	e5123fdb 	ldr	r3, [r2, #-4059]
 4d0:	e3130b01 	tst	r3, #1024	; 0x400
 4d4:	0afffffc 	beq	4cc <main+0x4b8>
 4d8:	e3a03c06 	mov	r3, #1536	; 0x600
 4dc:	e3a02b01 	mov	r2, #1024	; 0x400
 4e0:	e3e01a01 	mvn	r1, #4096	; 0x1000
 4e4:	e2833003 	add	r3, r3, #3	; 0x3
 4e8:	e2822003 	add	r2, r2, #3	; 0x3
 4ec:	e5013fdf 	str	r3, [r1, #-4063]
 4f0:	e5012fdf 	str	r2, [r1, #-4063]
 4f4:	e5113fdb 	ldr	r3, [r1, #-4059]
 4f8:	e3130b01 	tst	r3, #1024	; 0x400
 4fc:	1a000003 	bne	510 <main+0x4fc>
 500:	e1a02001 	mov	r2, r1
 504:	e5123fdb 	ldr	r3, [r2, #-4059]
 508:	e3130b01 	tst	r3, #1024	; 0x400
 50c:	0afffffc 	beq	504 <main+0x4f0>
 510:	e3a03d1b 	mov	r3, #1728	; 0x6c0
 514:	e3a02d13 	mov	r2, #1216	; 0x4c0
 518:	e3e01a01 	mvn	r1, #4096	; 0x1000
 51c:	e2833008 	add	r3, r3, #8	; 0x8
 520:	e2822008 	add	r2, r2, #8	; 0x8
 524:	e5013fdf 	str	r3, [r1, #-4063]
 528:	e5012fdf 	str	r2, [r1, #-4063]
 52c:	e5113fdb 	ldr	r3, [r1, #-4059]
 530:	e3130b01 	tst	r3, #1024	; 0x400
 534:	1a000003 	bne	548 <main+0x534>
 538:	e1a02001 	mov	r2, r1
 53c:	e5123fdb 	ldr	r3, [r2, #-4059]
 540:	e3130b01 	tst	r3, #1024	; 0x400
 544:	0afffffc 	beq	53c <main+0x528>
 548:	e3a03d1b 	mov	r3, #1728	; 0x6c0
 54c:	e3a02d13 	mov	r2, #1216	; 0x4c0
 550:	e3e01a01 	mvn	r1, #4096	; 0x1000
 554:	e2833008 	add	r3, r3, #8	; 0x8
 558:	e2822008 	add	r2, r2, #8	; 0x8
 55c:	e5013fdf 	str	r3, [r1, #-4063]
 560:	e5012fdf 	str	r2, [r1, #-4063]
 564:	e5113fdb 	ldr	r3, [r1, #-4059]
 568:	e3130b01 	tst	r3, #1024	; 0x400
 56c:	1a000003 	bne	580 <main+0x56c>
 570:	e1a02001 	mov	r2, r1
 574:	e5123fdb 	ldr	r3, [r2, #-4059]
 578:	e3130b01 	tst	r3, #1024	; 0x400
 57c:	0afffffc 	beq	574 <main+0x560>
 580:	e3e01a01 	mvn	r1, #4096	; 0x1000
 584:	e3a03c06 	mov	r3, #1536	; 0x600
 588:	e3a02b01 	mov	r2, #1024	; 0x400
 58c:	e5013fdf 	str	r3, [r1, #-4063]
 590:	e5012fdf 	str	r2, [r1, #-4063]
 594:	e5113fdb 	ldr	r3, [r1, #-4059]
 598:	e3130b01 	tst	r3, #1024	; 0x400
 59c:	1a000003 	bne	5b0 <main+0x59c>
 5a0:	e1a02001 	mov	r2, r1
 5a4:	e5123fdb 	ldr	r3, [r2, #-4059]
 5a8:	e3130b01 	tst	r3, #1024	; 0x400
 5ac:	0afffffc 	beq	5a4 <main+0x590>
 5b0:	e3a03e63 	mov	r3, #1584	; 0x630
 5b4:	e3a02e43 	mov	r2, #1072	; 0x430
 5b8:	e3e01a01 	mvn	r1, #4096	; 0x1000
 5bc:	e2833002 	add	r3, r3, #2	; 0x2
 5c0:	e2822002 	add	r2, r2, #2	; 0x2
 5c4:	e5013fdf 	str	r3, [r1, #-4063]
 5c8:	e5012fdf 	str	r2, [r1, #-4063]
 5cc:	e5113fdb 	ldr	r3, [r1, #-4059]
 5d0:	e3130b01 	tst	r3, #1024	; 0x400
 5d4:	1a000003 	bne	5e8 <main+0x5d4>
 5d8:	e1a02001 	mov	r2, r1
 5dc:	e5123fdb 	ldr	r3, [r2, #-4059]
 5e0:	e3130b01 	tst	r3, #1024	; 0x400
 5e4:	0afffffc 	beq	5dc <main+0x5c8>
 5e8:	e3a03e76 	mov	r3, #1888	; 0x760
 5ec:	e3a02e46 	mov	r2, #1120	; 0x460
 5f0:	e3e01a01 	mvn	r1, #4096	; 0x1000
 5f4:	e2833004 	add	r3, r3, #4	; 0x4
 5f8:	e2822004 	add	r2, r2, #4	; 0x4
 5fc:	e5013fdf 	str	r3, [r1, #-4063]
 600:	e5012fdf 	str	r2, [r1, #-4063]
 604:	e5113fdb 	ldr	r3, [r1, #-4059]
 608:	e3130b01 	tst	r3, #1024	; 0x400
 60c:	1a000003 	bne	620 <main+0x60c>
 610:	e1a02001 	mov	r2, r1
 614:	e5123fdb 	ldr	r3, [r2, #-4059]
 618:	e3130b01 	tst	r3, #1024	; 0x400
 61c:	0afffffc 	beq	614 <main+0x600>
 620:	e3a03c06 	mov	r3, #1536	; 0x600
 624:	e3a02b01 	mov	r2, #1024	; 0x400
 628:	e3e01a01 	mvn	r1, #4096	; 0x1000
 62c:	e2833003 	add	r3, r3, #3	; 0x3
 630:	e2822003 	add	r2, r2, #3	; 0x3
 634:	e5013fdf 	str	r3, [r1, #-4063]
 638:	e5012fdf 	str	r2, [r1, #-4063]
 63c:	e5113fdb 	ldr	r3, [r1, #-4059]
 640:	e3130b01 	tst	r3, #1024	; 0x400
 644:	1a000003 	bne	658 <main+0x644>
 648:	e1a02001 	mov	r2, r1
 64c:	e5123fdb 	ldr	r3, [r2, #-4059]
 650:	e3130b01 	tst	r3, #1024	; 0x400
 654:	0afffffc 	beq	64c <main+0x638>
 658:	e3a03e6d 	mov	r3, #1744	; 0x6d0
 65c:	e3a02e4d 	mov	r2, #1232	; 0x4d0
 660:	e3e01a01 	mvn	r1, #4096	; 0x1000
 664:	e283300c 	add	r3, r3, #12	; 0xc
 668:	e282200c 	add	r2, r2, #12	; 0xc
 66c:	e5013fdf 	str	r3, [r1, #-4063]
 670:	e5012fdf 	str	r2, [r1, #-4063]
 674:	e5113fdb 	ldr	r3, [r1, #-4059]
 678:	e3130b01 	tst	r3, #1024	; 0x400
 67c:	1a000003 	bne	690 <main+0x67c>
 680:	e1a02001 	mov	r2, r1
 684:	e5123fdb 	ldr	r3, [r2, #-4059]
 688:	e3130b01 	tst	r3, #1024	; 0x400
 68c:	0afffffc 	beq	684 <main+0x670>
 690:	e3a03c06 	mov	r3, #1536	; 0x600
 694:	e3a02b01 	mov	r2, #1024	; 0x400
 698:	e3e01a01 	mvn	r1, #4096	; 0x1000
 69c:	e283300a 	add	r3, r3, #10	; 0xa
 6a0:	e282200a 	add	r2, r2, #10	; 0xa
 6a4:	e5013fdf 	str	r3, [r1, #-4063]
 6a8:	e5012fdf 	str	r2, [r1, #-4063]
 6ac:	e5113fdb 	ldr	r3, [r1, #-4059]
 6b0:	e3130b01 	tst	r3, #1024	; 0x400
 6b4:	1a000003 	bne	6c8 <main+0x6b4>
 6b8:	e1a02001 	mov	r2, r1
 6bc:	e5123fdb 	ldr	r3, [r2, #-4059]
 6c0:	e3130b01 	tst	r3, #1024	; 0x400
 6c4:	0afffffc 	beq	6bc <main+0x6a8>
 6c8:	e3e01a01 	mvn	r1, #4096	; 0x1000
 6cc:	e3a03c06 	mov	r3, #1536	; 0x600
 6d0:	e3a02b01 	mov	r2, #1024	; 0x400
 6d4:	e5013fdf 	str	r3, [r1, #-4063]
 6d8:	e5012fdf 	str	r2, [r1, #-4063]
 6dc:	e5113fdb 	ldr	r3, [r1, #-4059]
 6e0:	e3130b01 	tst	r3, #1024	; 0x400
 6e4:	1a000003 	bne	6f8 <main+0x6e4>
 6e8:	e1a02001 	mov	r2, r1
 6ec:	e5123fdb 	ldr	r3, [r2, #-4059]
 6f0:	e3130b01 	tst	r3, #1024	; 0x400
 6f4:	0afffffc 	beq	6ec <main+0x6d8>
 6f8:	e3e01a01 	mvn	r1, #4096	; 0x1000
 6fc:	e3a03c06 	mov	r3, #1536	; 0x600
 700:	e3a02b01 	mov	r2, #1024	; 0x400
 704:	e5013fdf 	str	r3, [r1, #-4063]
 708:	e5012fdf 	str	r2, [r1, #-4063]
 70c:	e5113fdb 	ldr	r3, [r1, #-4059]
 710:	e3130b01 	tst	r3, #1024	; 0x400
 714:	1a000003 	bne	728 <main+0x714>
 718:	e1a02001 	mov	r2, r1
 71c:	e5123fdb 	ldr	r3, [r2, #-4059]
 720:	e3130b01 	tst	r3, #1024	; 0x400
 724:	0afffffc 	beq	71c <main+0x708>
 728:	e3a03e73 	mov	r3, #1840	; 0x730
 72c:	e3a02e43 	mov	r2, #1072	; 0x430
 730:	e3e01a01 	mvn	r1, #4096	; 0x1000
 734:	e2833002 	add	r3, r3, #2	; 0x2
 738:	e2822002 	add	r2, r2, #2	; 0x2
		
	return 0;

} 73c:	e3a00000 	mov	r0, #0	; 0x0
 740:	e5013fdf 	str	r3, [r1, #-4063]
 744:	e5012fdf 	str	r2, [r1, #-4063]
 748:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
 74c:	00000850 	andeq	r0, r0, r0, asr r8
