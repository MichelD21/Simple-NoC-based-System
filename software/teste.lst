
teste.elf:     file format elf32-bigarm

Disassembly of section .text:

00000000 <start>:
   0:	e10f1000 	mrs	r1, CPSR
   4:	e3c11080 	bic	r1, r1, #128	; 0x80
   8:	e121f001 	msr	CPSR_c, r1
   c:	eb000000 	bl	14 <main>

00000010 <loop>:
  10:	eafffffe 	b	10 <loop>

00000014 <main>:
	int i, j;
	struct ArkeOutputInterface arke_oif;
	
	int stall_go_in;
	stall_go_in = ((GPIO_IN>>10) & 0x1);
  14:	e3e03a01 	mvn	r3, #4096	; 0x1000
  18:	e5132fdb 	ldr	r2, [r3, #-4059]
	
	// init
				arke_oif.data_out = 0;
				arke_oif.eop_out = 0; 
				arke_oif.tx = 0;
				arke_oif.stall_go_out = 1;
				
				GPIO_OUT = TO_INTEGER(arke_oif);
  1c:	e3a02b01 	mov	r2, #1024	; 0x400
  20:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  24:	e5032fdf 	str	r2, [r3, #-4063]
  28:	e59f7108 	ldr	r7, [pc, #264]	; 138 <.text+0x138>
  2c:	e3a06000 	mov	r6, #0	; 0x0
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	while(1) {
		__asm__("");
	}
  30:	e087e286 	add	lr, r7, r6, lsl #5
  34:	e3a0c000 	mov	ip, #0	; 0x0
  38:	e3865c06 	orr	r5, r6, #1536	; 0x600
  3c:	e3864b01 	orr	r4, r6, #1024	; 0x400
  40:	e3e02a01 	mvn	r2, #4096	; 0x1000
  44:	e5123fdb 	ldr	r3, [r2, #-4059]
  48:	e3130b01 	tst	r3, #1024	; 0x400
  4c:	0afffffc 	beq	44 <main+0x30>
  50:	e3a03c06 	mov	r3, #1536	; 0x600
  54:	e3a02b01 	mov	r2, #1024	; 0x400
  58:	e3e01a01 	mvn	r1, #4096	; 0x1000
  5c:	e2833003 	add	r3, r3, #3	; 0x3
  60:	e2822003 	add	r2, r2, #3	; 0x3
  64:	e5013fdf 	str	r3, [r1, #-4063]
  68:	e5012fdf 	str	r2, [r1, #-4063]
  6c:	e5113fdb 	ldr	r3, [r1, #-4059]
  70:	e3130b01 	tst	r3, #1024	; 0x400
  74:	1a000003 	bne	88 <main+0x74>
  78:	e1a02001 	mov	r2, r1
  7c:	e5123fdb 	ldr	r3, [r2, #-4059]
  80:	e3130b01 	tst	r3, #1024	; 0x400
  84:	0afffffc 	beq	7c <main+0x68>
  88:	e1a03a85 	mov	r3, r5, lsl #21
  8c:	e1a02a84 	mov	r2, r4, lsl #21
  90:	e3e01a01 	mvn	r1, #4096	; 0x1000
  94:	e1a03aa3 	mov	r3, r3, lsr #21
  98:	e1a02aa2 	mov	r2, r2, lsr #21
  9c:	e5013fdf 	str	r3, [r1, #-4063]
  a0:	e5012fdf 	str	r2, [r1, #-4063]
  a4:	e5113fdb 	ldr	r3, [r1, #-4059]
  a8:	e3130b01 	tst	r3, #1024	; 0x400
  ac:	1a000003 	bne	c0 <main+0xac>
  b0:	e1a02001 	mov	r2, r1
  b4:	e5123fdb 	ldr	r3, [r2, #-4059]
  b8:	e3130b01 	tst	r3, #1024	; 0x400
  bc:	0afffffc 	beq	b4 <main+0xa0>
  c0:	e38c3c06 	orr	r3, ip, #1536	; 0x600
  c4:	e38c2b01 	orr	r2, ip, #1024	; 0x400
  c8:	e1a03a83 	mov	r3, r3, lsl #21
  cc:	e1a02a82 	mov	r2, r2, lsl #21
  d0:	e3e01a01 	mvn	r1, #4096	; 0x1000
  d4:	e1a03aa3 	mov	r3, r3, lsr #21
  d8:	e1a02aa2 	mov	r2, r2, lsr #21
  dc:	e5013fdf 	str	r3, [r1, #-4063]
  e0:	e5012fdf 	str	r2, [r1, #-4063]
  e4:	e5113fdb 	ldr	r3, [r1, #-4059]
  e8:	e3130b01 	tst	r3, #1024	; 0x400
  ec:	e5de0000 	ldrb	r0, [lr]
  f0:	1a000003 	bne	104 <main+0xf0>
  f4:	e1a02001 	mov	r2, r1
  f8:	e5123fdb 	ldr	r3, [r2, #-4059]
  fc:	e3130b01 	tst	r3, #1024	; 0x400
 100:	0afffffc 	beq	f8 <main+0xe4>
 104:	e28cc001 	add	ip, ip, #1	; 0x1
 108:	e3e02a01 	mvn	r2, #4096	; 0x1000
 10c:	e3801b01 	orr	r1, r0, #1024	; 0x400
 110:	e3803c07 	orr	r3, r0, #1792	; 0x700
 114:	e35c0020 	cmp	ip, #32	; 0x20
 118:	e5023fdf 	str	r3, [r2, #-4063]
 11c:	e28ee001 	add	lr, lr, #1	; 0x1
 120:	e5021fdf 	str	r1, [r2, #-4063]
 124:	1affffc5 	bne	40 <main+0x2c>
 128:	e2866001 	add	r6, r6, #1	; 0x1
 12c:	e3560018 	cmp	r6, #24	; 0x18
 130:	1affffbe 	bne	30 <main+0x1c>
 134:	eafffffe 	b	134 <main+0x120>
 138:	0000023c 	andeq	r0, r0, ip, lsr r2
