
teste.elf:     file format elf32-bigarm

Disassembly of section .text:

00000000 <start>:
       0:	e10f1000 	mrs	r1, CPSR
       4:	e3c11080 	bic	r1, r1, #128	; 0x80
       8:	e121f001 	msr	CPSR_c, r1
       c:	eb000000 	bl	14 <main>

00000010 <loop>:
      10:	eafffffe 	b	10 <loop>

00000014 <main>:
	int i, j;
	struct ArkeOutputInterface arke_oif;
	
	int stall_go_in;
	stall_go_in = ((GPIO_IN>>10) & 0x1);
      14:	e3e03a01 	mvn	r3, #4096	; 0x1000
      18:	e5132fdb 	ldr	r2, [r3, #-4059]
	
			// init
			arke_oif.data_out = 0;
			arke_oif.eop_out = 0; 
			arke_oif.tx = 0;
			arke_oif.stall_go_out = 1;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
      1c:	e3a02b01 	mov	r2, #1024	; 0x400
      20:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      24:	e5032fdf 	str	r2, [r3, #-4063]
      28:	e3a06000 	mov	r6, #0	; 0x0
      2c:	e59f8fc8 	ldr	r8, [pc, #4040]	; ffc <.text+0xffc>
      30:	e1a07006 	mov	r7, r6
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+50;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+100;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+150;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+200;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+50;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+50;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+50;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+100;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+50;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+150;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+50;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+200;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+50;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+100;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+50;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+100;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+100;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+100;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+150;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+100;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+200;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+100;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+150;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+50;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+150;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// line address
			arke_oif.data_out = i+100;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// column address
			arke_oif.data_out = j+150;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
			
		}
	}
	
	for(i=0; i<HEIGHT; i++) {
      34:	e087e008 	add	lr, r7, r8
      38:	e3a0c000 	mov	ip, #0	; 0x0
      3c:	e3865c06 	orr	r5, r6, #1536	; 0x600
      40:	e3864b01 	orr	r4, r6, #1024	; 0x400
      44:	e3e02a01 	mvn	r2, #4096	; 0x1000
      48:	e5123fdb 	ldr	r3, [r2, #-4059]
      4c:	e3130b01 	tst	r3, #1024	; 0x400
      50:	0afffffc 	beq	48 <main+0x34>
      54:	e3a03c06 	mov	r3, #1536	; 0x600
      58:	e3a02b01 	mov	r2, #1024	; 0x400
      5c:	e3e01a01 	mvn	r1, #4096	; 0x1000
      60:	e2833003 	add	r3, r3, #3	; 0x3
      64:	e2822003 	add	r2, r2, #3	; 0x3
      68:	e5013fdf 	str	r3, [r1, #-4063]
      6c:	e5012fdf 	str	r2, [r1, #-4063]
      70:	e5113fdb 	ldr	r3, [r1, #-4059]
      74:	e3130b01 	tst	r3, #1024	; 0x400
      78:	1a000003 	bne	8c <main+0x78>
      7c:	e1a02001 	mov	r2, r1
      80:	e5123fdb 	ldr	r3, [r2, #-4059]
      84:	e3130b01 	tst	r3, #1024	; 0x400
      88:	0afffffc 	beq	80 <main+0x6c>
      8c:	e1a03a85 	mov	r3, r5, lsl #21
      90:	e1a02a84 	mov	r2, r4, lsl #21
      94:	e3e01a01 	mvn	r1, #4096	; 0x1000
      98:	e1a03aa3 	mov	r3, r3, lsr #21
      9c:	e1a02aa2 	mov	r2, r2, lsr #21
      a0:	e5013fdf 	str	r3, [r1, #-4063]
      a4:	e5012fdf 	str	r2, [r1, #-4063]
      a8:	e5113fdb 	ldr	r3, [r1, #-4059]
      ac:	e3130b01 	tst	r3, #1024	; 0x400
      b0:	1a000003 	bne	c4 <main+0xb0>
      b4:	e1a02001 	mov	r2, r1
      b8:	e5123fdb 	ldr	r3, [r2, #-4059]
      bc:	e3130b01 	tst	r3, #1024	; 0x400
      c0:	0afffffc 	beq	b8 <main+0xa4>
      c4:	e38c3c06 	orr	r3, ip, #1536	; 0x600
      c8:	e38c2b01 	orr	r2, ip, #1024	; 0x400
      cc:	e1a03a83 	mov	r3, r3, lsl #21
      d0:	e1a02a82 	mov	r2, r2, lsl #21
      d4:	e3e01a01 	mvn	r1, #4096	; 0x1000
      d8:	e1a03aa3 	mov	r3, r3, lsr #21
      dc:	e1a02aa2 	mov	r2, r2, lsr #21
      e0:	e5013fdf 	str	r3, [r1, #-4063]
      e4:	e5012fdf 	str	r2, [r1, #-4063]
      e8:	e5113fdb 	ldr	r3, [r1, #-4059]
      ec:	e3130b01 	tst	r3, #1024	; 0x400
      f0:	e5de0000 	ldrb	r0, [lr]
      f4:	1a000003 	bne	108 <main+0xf4>
      f8:	e1a02001 	mov	r2, r1
      fc:	e5123fdb 	ldr	r3, [r2, #-4059]
     100:	e3130b01 	tst	r3, #1024	; 0x400
     104:	0afffffc 	beq	fc <main+0xe8>
     108:	e28cc001 	add	ip, ip, #1	; 0x1
     10c:	e3e02a01 	mvn	r2, #4096	; 0x1000
     110:	e3801b01 	orr	r1, r0, #1024	; 0x400
     114:	e3803c07 	orr	r3, r0, #1792	; 0x700
     118:	e35c0032 	cmp	ip, #50	; 0x32
     11c:	e5023fdf 	str	r3, [r2, #-4063]
     120:	e28ee001 	add	lr, lr, #1	; 0x1
     124:	e5021fdf 	str	r1, [r2, #-4063]
     128:	1affffc5 	bne	44 <main+0x30>
     12c:	e2866001 	add	r6, r6, #1	; 0x1
     130:	e3560032 	cmp	r6, #50	; 0x32
     134:	e2877032 	add	r7, r7, #50	; 0x32
     138:	1affffbd 	bne	34 <main+0x20>
     13c:	e3a07000 	mov	r7, #0	; 0x0
     140:	e087e008 	add	lr, r7, r8
     144:	e3a0c000 	mov	ip, #0	; 0x0
     148:	e3865c06 	orr	r5, r6, #1536	; 0x600
     14c:	e3864b01 	orr	r4, r6, #1024	; 0x400
     150:	e3e02a01 	mvn	r2, #4096	; 0x1000
     154:	e5123fdb 	ldr	r3, [r2, #-4059]
     158:	e3130b01 	tst	r3, #1024	; 0x400
     15c:	0afffffc 	beq	154 <main+0x140>
     160:	e3a03c06 	mov	r3, #1536	; 0x600
     164:	e3a02b01 	mov	r2, #1024	; 0x400
     168:	e3e01a01 	mvn	r1, #4096	; 0x1000
     16c:	e2833003 	add	r3, r3, #3	; 0x3
     170:	e2822003 	add	r2, r2, #3	; 0x3
     174:	e5013fdf 	str	r3, [r1, #-4063]
     178:	e5012fdf 	str	r2, [r1, #-4063]
     17c:	e5113fdb 	ldr	r3, [r1, #-4059]
     180:	e3130b01 	tst	r3, #1024	; 0x400
     184:	1a000003 	bne	198 <main+0x184>
     188:	e1a02001 	mov	r2, r1
     18c:	e5123fdb 	ldr	r3, [r2, #-4059]
     190:	e3130b01 	tst	r3, #1024	; 0x400
     194:	0afffffc 	beq	18c <main+0x178>
     198:	e1a03a85 	mov	r3, r5, lsl #21
     19c:	e1a02a84 	mov	r2, r4, lsl #21
     1a0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     1a4:	e1a03aa3 	mov	r3, r3, lsr #21
     1a8:	e1a02aa2 	mov	r2, r2, lsr #21
     1ac:	e5013fdf 	str	r3, [r1, #-4063]
     1b0:	e5012fdf 	str	r2, [r1, #-4063]
     1b4:	e5113fdb 	ldr	r3, [r1, #-4059]
     1b8:	e3130b01 	tst	r3, #1024	; 0x400
     1bc:	1a000003 	bne	1d0 <main+0x1bc>
     1c0:	e1a02001 	mov	r2, r1
     1c4:	e5123fdb 	ldr	r3, [r2, #-4059]
     1c8:	e3130b01 	tst	r3, #1024	; 0x400
     1cc:	0afffffc 	beq	1c4 <main+0x1b0>
     1d0:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     1d4:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     1d8:	e1a03a83 	mov	r3, r3, lsl #21
     1dc:	e1a02a82 	mov	r2, r2, lsl #21
     1e0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     1e4:	e1a03aa3 	mov	r3, r3, lsr #21
     1e8:	e1a02aa2 	mov	r2, r2, lsr #21
     1ec:	e5013fdf 	str	r3, [r1, #-4063]
     1f0:	e5012fdf 	str	r2, [r1, #-4063]
     1f4:	e5113fdb 	ldr	r3, [r1, #-4059]
     1f8:	e3130b01 	tst	r3, #1024	; 0x400
     1fc:	e5de0000 	ldrb	r0, [lr]
     200:	1a000003 	bne	214 <main+0x200>
     204:	e1a02001 	mov	r2, r1
     208:	e5123fdb 	ldr	r3, [r2, #-4059]
     20c:	e3130b01 	tst	r3, #1024	; 0x400
     210:	0afffffc 	beq	208 <main+0x1f4>
     214:	e28cc001 	add	ip, ip, #1	; 0x1
     218:	e3e02a01 	mvn	r2, #4096	; 0x1000
     21c:	e3801b01 	orr	r1, r0, #1024	; 0x400
     220:	e3803c07 	orr	r3, r0, #1792	; 0x700
     224:	e35c0032 	cmp	ip, #50	; 0x32
     228:	e5023fdf 	str	r3, [r2, #-4063]
     22c:	e28ee001 	add	lr, lr, #1	; 0x1
     230:	e5021fdf 	str	r1, [r2, #-4063]
     234:	1affffc5 	bne	150 <main+0x13c>
     238:	e3a03d27 	mov	r3, #2496	; 0x9c0
     23c:	e2877032 	add	r7, r7, #50	; 0x32
     240:	e2833004 	add	r3, r3, #4	; 0x4
     244:	e1570003 	cmp	r7, r3
     248:	e2866001 	add	r6, r6, #1	; 0x1
     24c:	1affffbb 	bne	140 <main+0x12c>
     250:	e3a07000 	mov	r7, #0	; 0x0
     254:	e3a06064 	mov	r6, #100	; 0x64
     258:	e087e008 	add	lr, r7, r8
     25c:	e3a0c000 	mov	ip, #0	; 0x0
     260:	e3865c06 	orr	r5, r6, #1536	; 0x600
     264:	e3864b01 	orr	r4, r6, #1024	; 0x400
     268:	e3e02a01 	mvn	r2, #4096	; 0x1000
     26c:	e5123fdb 	ldr	r3, [r2, #-4059]
     270:	e3130b01 	tst	r3, #1024	; 0x400
     274:	0afffffc 	beq	26c <main+0x258>
     278:	e3a03c06 	mov	r3, #1536	; 0x600
     27c:	e3a02b01 	mov	r2, #1024	; 0x400
     280:	e3e01a01 	mvn	r1, #4096	; 0x1000
     284:	e2833003 	add	r3, r3, #3	; 0x3
     288:	e2822003 	add	r2, r2, #3	; 0x3
     28c:	e5013fdf 	str	r3, [r1, #-4063]
     290:	e5012fdf 	str	r2, [r1, #-4063]
     294:	e5113fdb 	ldr	r3, [r1, #-4059]
     298:	e3130b01 	tst	r3, #1024	; 0x400
     29c:	1a000003 	bne	2b0 <main+0x29c>
     2a0:	e1a02001 	mov	r2, r1
     2a4:	e5123fdb 	ldr	r3, [r2, #-4059]
     2a8:	e3130b01 	tst	r3, #1024	; 0x400
     2ac:	0afffffc 	beq	2a4 <main+0x290>
     2b0:	e1a03a85 	mov	r3, r5, lsl #21
     2b4:	e1a02a84 	mov	r2, r4, lsl #21
     2b8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     2bc:	e1a03aa3 	mov	r3, r3, lsr #21
     2c0:	e1a02aa2 	mov	r2, r2, lsr #21
     2c4:	e5013fdf 	str	r3, [r1, #-4063]
     2c8:	e5012fdf 	str	r2, [r1, #-4063]
     2cc:	e5113fdb 	ldr	r3, [r1, #-4059]
     2d0:	e3130b01 	tst	r3, #1024	; 0x400
     2d4:	1a000003 	bne	2e8 <main+0x2d4>
     2d8:	e1a02001 	mov	r2, r1
     2dc:	e5123fdb 	ldr	r3, [r2, #-4059]
     2e0:	e3130b01 	tst	r3, #1024	; 0x400
     2e4:	0afffffc 	beq	2dc <main+0x2c8>
     2e8:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     2ec:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     2f0:	e1a03a83 	mov	r3, r3, lsl #21
     2f4:	e1a02a82 	mov	r2, r2, lsl #21
     2f8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     2fc:	e1a03aa3 	mov	r3, r3, lsr #21
     300:	e1a02aa2 	mov	r2, r2, lsr #21
     304:	e5013fdf 	str	r3, [r1, #-4063]
     308:	e5012fdf 	str	r2, [r1, #-4063]
     30c:	e5113fdb 	ldr	r3, [r1, #-4059]
     310:	e3130b01 	tst	r3, #1024	; 0x400
     314:	e5de0000 	ldrb	r0, [lr]
     318:	1a000003 	bne	32c <main+0x318>
     31c:	e1a02001 	mov	r2, r1
     320:	e5123fdb 	ldr	r3, [r2, #-4059]
     324:	e3130b01 	tst	r3, #1024	; 0x400
     328:	0afffffc 	beq	320 <main+0x30c>
     32c:	e28cc001 	add	ip, ip, #1	; 0x1
     330:	e3e02a01 	mvn	r2, #4096	; 0x1000
     334:	e3801b01 	orr	r1, r0, #1024	; 0x400
     338:	e3803c07 	orr	r3, r0, #1792	; 0x700
     33c:	e35c0032 	cmp	ip, #50	; 0x32
     340:	e5023fdf 	str	r3, [r2, #-4063]
     344:	e28ee001 	add	lr, lr, #1	; 0x1
     348:	e5021fdf 	str	r1, [r2, #-4063]
     34c:	1affffc5 	bne	268 <main+0x254>
     350:	e3a03d27 	mov	r3, #2496	; 0x9c0
     354:	e2877032 	add	r7, r7, #50	; 0x32
     358:	e2833004 	add	r3, r3, #4	; 0x4
     35c:	e1570003 	cmp	r7, r3
     360:	e2866001 	add	r6, r6, #1	; 0x1
     364:	1affffbb 	bne	258 <main+0x244>
     368:	e3a07000 	mov	r7, #0	; 0x0
     36c:	e3a06096 	mov	r6, #150	; 0x96
     370:	e087e008 	add	lr, r7, r8
     374:	e3a0c000 	mov	ip, #0	; 0x0
     378:	e3865c06 	orr	r5, r6, #1536	; 0x600
     37c:	e3864b01 	orr	r4, r6, #1024	; 0x400
     380:	e3e02a01 	mvn	r2, #4096	; 0x1000
     384:	e5123fdb 	ldr	r3, [r2, #-4059]
     388:	e3130b01 	tst	r3, #1024	; 0x400
     38c:	0afffffc 	beq	384 <main+0x370>
     390:	e3a03c06 	mov	r3, #1536	; 0x600
     394:	e3a02b01 	mov	r2, #1024	; 0x400
     398:	e3e01a01 	mvn	r1, #4096	; 0x1000
     39c:	e2833003 	add	r3, r3, #3	; 0x3
     3a0:	e2822003 	add	r2, r2, #3	; 0x3
     3a4:	e5013fdf 	str	r3, [r1, #-4063]
     3a8:	e5012fdf 	str	r2, [r1, #-4063]
     3ac:	e5113fdb 	ldr	r3, [r1, #-4059]
     3b0:	e3130b01 	tst	r3, #1024	; 0x400
     3b4:	1a000003 	bne	3c8 <main+0x3b4>
     3b8:	e1a02001 	mov	r2, r1
     3bc:	e5123fdb 	ldr	r3, [r2, #-4059]
     3c0:	e3130b01 	tst	r3, #1024	; 0x400
     3c4:	0afffffc 	beq	3bc <main+0x3a8>
     3c8:	e1a03a85 	mov	r3, r5, lsl #21
     3cc:	e1a02a84 	mov	r2, r4, lsl #21
     3d0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     3d4:	e1a03aa3 	mov	r3, r3, lsr #21
     3d8:	e1a02aa2 	mov	r2, r2, lsr #21
     3dc:	e5013fdf 	str	r3, [r1, #-4063]
     3e0:	e5012fdf 	str	r2, [r1, #-4063]
     3e4:	e5113fdb 	ldr	r3, [r1, #-4059]
     3e8:	e3130b01 	tst	r3, #1024	; 0x400
     3ec:	1a000003 	bne	400 <main+0x3ec>
     3f0:	e1a02001 	mov	r2, r1
     3f4:	e5123fdb 	ldr	r3, [r2, #-4059]
     3f8:	e3130b01 	tst	r3, #1024	; 0x400
     3fc:	0afffffc 	beq	3f4 <main+0x3e0>
     400:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     404:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     408:	e1a03a83 	mov	r3, r3, lsl #21
     40c:	e1a02a82 	mov	r2, r2, lsl #21
     410:	e3e01a01 	mvn	r1, #4096	; 0x1000
     414:	e1a03aa3 	mov	r3, r3, lsr #21
     418:	e1a02aa2 	mov	r2, r2, lsr #21
     41c:	e5013fdf 	str	r3, [r1, #-4063]
     420:	e5012fdf 	str	r2, [r1, #-4063]
     424:	e5113fdb 	ldr	r3, [r1, #-4059]
     428:	e3130b01 	tst	r3, #1024	; 0x400
     42c:	e5de0000 	ldrb	r0, [lr]
     430:	1a000003 	bne	444 <main+0x430>
     434:	e1a02001 	mov	r2, r1
     438:	e5123fdb 	ldr	r3, [r2, #-4059]
     43c:	e3130b01 	tst	r3, #1024	; 0x400
     440:	0afffffc 	beq	438 <main+0x424>
     444:	e28cc001 	add	ip, ip, #1	; 0x1
     448:	e3e02a01 	mvn	r2, #4096	; 0x1000
     44c:	e3801b01 	orr	r1, r0, #1024	; 0x400
     450:	e3803c07 	orr	r3, r0, #1792	; 0x700
     454:	e35c0032 	cmp	ip, #50	; 0x32
     458:	e5023fdf 	str	r3, [r2, #-4063]
     45c:	e28ee001 	add	lr, lr, #1	; 0x1
     460:	e5021fdf 	str	r1, [r2, #-4063]
     464:	1affffc5 	bne	380 <main+0x36c>
     468:	e3a03d27 	mov	r3, #2496	; 0x9c0
     46c:	e2877032 	add	r7, r7, #50	; 0x32
     470:	e2833004 	add	r3, r3, #4	; 0x4
     474:	e1570003 	cmp	r7, r3
     478:	e2866001 	add	r6, r6, #1	; 0x1
     47c:	1affffbb 	bne	370 <main+0x35c>
     480:	e3a07000 	mov	r7, #0	; 0x0
     484:	e3a060c8 	mov	r6, #200	; 0xc8
     488:	e087e008 	add	lr, r7, r8
     48c:	e3a0c000 	mov	ip, #0	; 0x0
     490:	e3865c06 	orr	r5, r6, #1536	; 0x600
     494:	e3864b01 	orr	r4, r6, #1024	; 0x400
     498:	e3e02a01 	mvn	r2, #4096	; 0x1000
     49c:	e5123fdb 	ldr	r3, [r2, #-4059]
     4a0:	e3130b01 	tst	r3, #1024	; 0x400
     4a4:	0afffffc 	beq	49c <main+0x488>
     4a8:	e3a03c06 	mov	r3, #1536	; 0x600
     4ac:	e3a02b01 	mov	r2, #1024	; 0x400
     4b0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     4b4:	e2833003 	add	r3, r3, #3	; 0x3
     4b8:	e2822003 	add	r2, r2, #3	; 0x3
     4bc:	e5013fdf 	str	r3, [r1, #-4063]
     4c0:	e5012fdf 	str	r2, [r1, #-4063]
     4c4:	e5113fdb 	ldr	r3, [r1, #-4059]
     4c8:	e3130b01 	tst	r3, #1024	; 0x400
     4cc:	1a000003 	bne	4e0 <main+0x4cc>
     4d0:	e1a02001 	mov	r2, r1
     4d4:	e5123fdb 	ldr	r3, [r2, #-4059]
     4d8:	e3130b01 	tst	r3, #1024	; 0x400
     4dc:	0afffffc 	beq	4d4 <main+0x4c0>
     4e0:	e1a03a85 	mov	r3, r5, lsl #21
     4e4:	e1a02a84 	mov	r2, r4, lsl #21
     4e8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     4ec:	e1a03aa3 	mov	r3, r3, lsr #21
     4f0:	e1a02aa2 	mov	r2, r2, lsr #21
     4f4:	e5013fdf 	str	r3, [r1, #-4063]
     4f8:	e5012fdf 	str	r2, [r1, #-4063]
     4fc:	e5113fdb 	ldr	r3, [r1, #-4059]
     500:	e3130b01 	tst	r3, #1024	; 0x400
     504:	1a000003 	bne	518 <main+0x504>
     508:	e1a02001 	mov	r2, r1
     50c:	e5123fdb 	ldr	r3, [r2, #-4059]
     510:	e3130b01 	tst	r3, #1024	; 0x400
     514:	0afffffc 	beq	50c <main+0x4f8>
     518:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     51c:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     520:	e1a03a83 	mov	r3, r3, lsl #21
     524:	e1a02a82 	mov	r2, r2, lsl #21
     528:	e3e01a01 	mvn	r1, #4096	; 0x1000
     52c:	e1a03aa3 	mov	r3, r3, lsr #21
     530:	e1a02aa2 	mov	r2, r2, lsr #21
     534:	e5013fdf 	str	r3, [r1, #-4063]
     538:	e5012fdf 	str	r2, [r1, #-4063]
     53c:	e5113fdb 	ldr	r3, [r1, #-4059]
     540:	e3130b01 	tst	r3, #1024	; 0x400
     544:	e5de0000 	ldrb	r0, [lr]
     548:	1a000003 	bne	55c <main+0x548>
     54c:	e1a02001 	mov	r2, r1
     550:	e5123fdb 	ldr	r3, [r2, #-4059]
     554:	e3130b01 	tst	r3, #1024	; 0x400
     558:	0afffffc 	beq	550 <main+0x53c>
     55c:	e28cc001 	add	ip, ip, #1	; 0x1
     560:	e3e02a01 	mvn	r2, #4096	; 0x1000
     564:	e3801b01 	orr	r1, r0, #1024	; 0x400
     568:	e3803c07 	orr	r3, r0, #1792	; 0x700
     56c:	e35c0032 	cmp	ip, #50	; 0x32
     570:	e5023fdf 	str	r3, [r2, #-4063]
     574:	e28ee001 	add	lr, lr, #1	; 0x1
     578:	e5021fdf 	str	r1, [r2, #-4063]
     57c:	1affffc5 	bne	498 <main+0x484>
     580:	e3a03d27 	mov	r3, #2496	; 0x9c0
     584:	e2877032 	add	r7, r7, #50	; 0x32
     588:	e2833004 	add	r3, r3, #4	; 0x4
     58c:	e1570003 	cmp	r7, r3
     590:	e2866001 	add	r6, r6, #1	; 0x1
     594:	1affffbb 	bne	488 <main+0x474>
     598:	e3a04000 	mov	r4, #0	; 0x0
     59c:	e1a07004 	mov	r7, r4
     5a0:	e087e008 	add	lr, r7, r8
     5a4:	e3a0c032 	mov	ip, #50	; 0x32
     5a8:	e3846c06 	orr	r6, r4, #1536	; 0x600
     5ac:	e3845b01 	orr	r5, r4, #1024	; 0x400
     5b0:	e3e02a01 	mvn	r2, #4096	; 0x1000
     5b4:	e5123fdb 	ldr	r3, [r2, #-4059]
     5b8:	e3130b01 	tst	r3, #1024	; 0x400
     5bc:	0afffffc 	beq	5b4 <main+0x5a0>
     5c0:	e3a03c06 	mov	r3, #1536	; 0x600
     5c4:	e3a02b01 	mov	r2, #1024	; 0x400
     5c8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     5cc:	e2833003 	add	r3, r3, #3	; 0x3
     5d0:	e2822003 	add	r2, r2, #3	; 0x3
     5d4:	e5013fdf 	str	r3, [r1, #-4063]
     5d8:	e5012fdf 	str	r2, [r1, #-4063]
     5dc:	e5113fdb 	ldr	r3, [r1, #-4059]
     5e0:	e3130b01 	tst	r3, #1024	; 0x400
     5e4:	1a000003 	bne	5f8 <main+0x5e4>
     5e8:	e1a02001 	mov	r2, r1
     5ec:	e5123fdb 	ldr	r3, [r2, #-4059]
     5f0:	e3130b01 	tst	r3, #1024	; 0x400
     5f4:	0afffffc 	beq	5ec <main+0x5d8>
     5f8:	e1a03a86 	mov	r3, r6, lsl #21
     5fc:	e1a02a85 	mov	r2, r5, lsl #21
     600:	e3e01a01 	mvn	r1, #4096	; 0x1000
     604:	e1a03aa3 	mov	r3, r3, lsr #21
     608:	e1a02aa2 	mov	r2, r2, lsr #21
     60c:	e5013fdf 	str	r3, [r1, #-4063]
     610:	e5012fdf 	str	r2, [r1, #-4063]
     614:	e5113fdb 	ldr	r3, [r1, #-4059]
     618:	e3130b01 	tst	r3, #1024	; 0x400
     61c:	1a000003 	bne	630 <main+0x61c>
     620:	e1a02001 	mov	r2, r1
     624:	e5123fdb 	ldr	r3, [r2, #-4059]
     628:	e3130b01 	tst	r3, #1024	; 0x400
     62c:	0afffffc 	beq	624 <main+0x610>
     630:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     634:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     638:	e1a03a83 	mov	r3, r3, lsl #21
     63c:	e1a02a82 	mov	r2, r2, lsl #21
     640:	e3e01a01 	mvn	r1, #4096	; 0x1000
     644:	e1a03aa3 	mov	r3, r3, lsr #21
     648:	e1a02aa2 	mov	r2, r2, lsr #21
     64c:	e5013fdf 	str	r3, [r1, #-4063]
     650:	e5012fdf 	str	r2, [r1, #-4063]
     654:	e5113fdb 	ldr	r3, [r1, #-4059]
     658:	e3130b01 	tst	r3, #1024	; 0x400
     65c:	e5de0000 	ldrb	r0, [lr]
     660:	1a000003 	bne	674 <main+0x660>
     664:	e1a02001 	mov	r2, r1
     668:	e5123fdb 	ldr	r3, [r2, #-4059]
     66c:	e3130b01 	tst	r3, #1024	; 0x400
     670:	0afffffc 	beq	668 <main+0x654>
     674:	e28cc001 	add	ip, ip, #1	; 0x1
     678:	e3e02a01 	mvn	r2, #4096	; 0x1000
     67c:	e3801b01 	orr	r1, r0, #1024	; 0x400
     680:	e3803c07 	orr	r3, r0, #1792	; 0x700
     684:	e35c0064 	cmp	ip, #100	; 0x64
     688:	e5023fdf 	str	r3, [r2, #-4063]
     68c:	e28ee001 	add	lr, lr, #1	; 0x1
     690:	e5021fdf 	str	r1, [r2, #-4063]
     694:	1affffc5 	bne	5b0 <main+0x59c>
     698:	e2844001 	add	r4, r4, #1	; 0x1
     69c:	e3540032 	cmp	r4, #50	; 0x32
     6a0:	e2877032 	add	r7, r7, #50	; 0x32
     6a4:	1affffbd 	bne	5a0 <main+0x58c>
     6a8:	e1a06004 	mov	r6, r4
     6ac:	e3a07000 	mov	r7, #0	; 0x0
     6b0:	e087e008 	add	lr, r7, r8
     6b4:	e3a0c032 	mov	ip, #50	; 0x32
     6b8:	e3865c06 	orr	r5, r6, #1536	; 0x600
     6bc:	e3864b01 	orr	r4, r6, #1024	; 0x400
     6c0:	e3e02a01 	mvn	r2, #4096	; 0x1000
     6c4:	e5123fdb 	ldr	r3, [r2, #-4059]
     6c8:	e3130b01 	tst	r3, #1024	; 0x400
     6cc:	0afffffc 	beq	6c4 <main+0x6b0>
     6d0:	e3a03c06 	mov	r3, #1536	; 0x600
     6d4:	e3a02b01 	mov	r2, #1024	; 0x400
     6d8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     6dc:	e2833003 	add	r3, r3, #3	; 0x3
     6e0:	e2822003 	add	r2, r2, #3	; 0x3
     6e4:	e5013fdf 	str	r3, [r1, #-4063]
     6e8:	e5012fdf 	str	r2, [r1, #-4063]
     6ec:	e5113fdb 	ldr	r3, [r1, #-4059]
     6f0:	e3130b01 	tst	r3, #1024	; 0x400
     6f4:	1a000003 	bne	708 <main+0x6f4>
     6f8:	e1a02001 	mov	r2, r1
     6fc:	e5123fdb 	ldr	r3, [r2, #-4059]
     700:	e3130b01 	tst	r3, #1024	; 0x400
     704:	0afffffc 	beq	6fc <main+0x6e8>
     708:	e1a03a85 	mov	r3, r5, lsl #21
     70c:	e1a02a84 	mov	r2, r4, lsl #21
     710:	e3e01a01 	mvn	r1, #4096	; 0x1000
     714:	e1a03aa3 	mov	r3, r3, lsr #21
     718:	e1a02aa2 	mov	r2, r2, lsr #21
     71c:	e5013fdf 	str	r3, [r1, #-4063]
     720:	e5012fdf 	str	r2, [r1, #-4063]
     724:	e5113fdb 	ldr	r3, [r1, #-4059]
     728:	e3130b01 	tst	r3, #1024	; 0x400
     72c:	1a000003 	bne	740 <main+0x72c>
     730:	e1a02001 	mov	r2, r1
     734:	e5123fdb 	ldr	r3, [r2, #-4059]
     738:	e3130b01 	tst	r3, #1024	; 0x400
     73c:	0afffffc 	beq	734 <main+0x720>
     740:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     744:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     748:	e1a03a83 	mov	r3, r3, lsl #21
     74c:	e1a02a82 	mov	r2, r2, lsl #21
     750:	e3e01a01 	mvn	r1, #4096	; 0x1000
     754:	e1a03aa3 	mov	r3, r3, lsr #21
     758:	e1a02aa2 	mov	r2, r2, lsr #21
     75c:	e5013fdf 	str	r3, [r1, #-4063]
     760:	e5012fdf 	str	r2, [r1, #-4063]
     764:	e5113fdb 	ldr	r3, [r1, #-4059]
     768:	e3130b01 	tst	r3, #1024	; 0x400
     76c:	e5de0000 	ldrb	r0, [lr]
     770:	1a000003 	bne	784 <main+0x770>
     774:	e1a02001 	mov	r2, r1
     778:	e5123fdb 	ldr	r3, [r2, #-4059]
     77c:	e3130b01 	tst	r3, #1024	; 0x400
     780:	0afffffc 	beq	778 <main+0x764>
     784:	e28cc001 	add	ip, ip, #1	; 0x1
     788:	e3e02a01 	mvn	r2, #4096	; 0x1000
     78c:	e3801b01 	orr	r1, r0, #1024	; 0x400
     790:	e3803c07 	orr	r3, r0, #1792	; 0x700
     794:	e35c0064 	cmp	ip, #100	; 0x64
     798:	e5023fdf 	str	r3, [r2, #-4063]
     79c:	e28ee001 	add	lr, lr, #1	; 0x1
     7a0:	e5021fdf 	str	r1, [r2, #-4063]
     7a4:	1affffc5 	bne	6c0 <main+0x6ac>
     7a8:	e3a03d27 	mov	r3, #2496	; 0x9c0
     7ac:	e2877032 	add	r7, r7, #50	; 0x32
     7b0:	e2833004 	add	r3, r3, #4	; 0x4
     7b4:	e1570003 	cmp	r7, r3
     7b8:	e2866001 	add	r6, r6, #1	; 0x1
     7bc:	1affffbb 	bne	6b0 <main+0x69c>
     7c0:	e1a0600c 	mov	r6, ip
     7c4:	e3a07000 	mov	r7, #0	; 0x0
     7c8:	e087e008 	add	lr, r7, r8
     7cc:	e3a0c032 	mov	ip, #50	; 0x32
     7d0:	e3865c06 	orr	r5, r6, #1536	; 0x600
     7d4:	e3864b01 	orr	r4, r6, #1024	; 0x400
     7d8:	e3e02a01 	mvn	r2, #4096	; 0x1000
     7dc:	e5123fdb 	ldr	r3, [r2, #-4059]
     7e0:	e3130b01 	tst	r3, #1024	; 0x400
     7e4:	0afffffc 	beq	7dc <main+0x7c8>
     7e8:	e3a03c06 	mov	r3, #1536	; 0x600
     7ec:	e3a02b01 	mov	r2, #1024	; 0x400
     7f0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     7f4:	e2833003 	add	r3, r3, #3	; 0x3
     7f8:	e2822003 	add	r2, r2, #3	; 0x3
     7fc:	e5013fdf 	str	r3, [r1, #-4063]
     800:	e5012fdf 	str	r2, [r1, #-4063]
     804:	e5113fdb 	ldr	r3, [r1, #-4059]
     808:	e3130b01 	tst	r3, #1024	; 0x400
     80c:	1a000003 	bne	820 <main+0x80c>
     810:	e1a02001 	mov	r2, r1
     814:	e5123fdb 	ldr	r3, [r2, #-4059]
     818:	e3130b01 	tst	r3, #1024	; 0x400
     81c:	0afffffc 	beq	814 <main+0x800>
     820:	e1a03a85 	mov	r3, r5, lsl #21
     824:	e1a02a84 	mov	r2, r4, lsl #21
     828:	e3e01a01 	mvn	r1, #4096	; 0x1000
     82c:	e1a03aa3 	mov	r3, r3, lsr #21
     830:	e1a02aa2 	mov	r2, r2, lsr #21
     834:	e5013fdf 	str	r3, [r1, #-4063]
     838:	e5012fdf 	str	r2, [r1, #-4063]
     83c:	e5113fdb 	ldr	r3, [r1, #-4059]
     840:	e3130b01 	tst	r3, #1024	; 0x400
     844:	1a000003 	bne	858 <main+0x844>
     848:	e1a02001 	mov	r2, r1
     84c:	e5123fdb 	ldr	r3, [r2, #-4059]
     850:	e3130b01 	tst	r3, #1024	; 0x400
     854:	0afffffc 	beq	84c <main+0x838>
     858:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     85c:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     860:	e1a03a83 	mov	r3, r3, lsl #21
     864:	e1a02a82 	mov	r2, r2, lsl #21
     868:	e3e01a01 	mvn	r1, #4096	; 0x1000
     86c:	e1a03aa3 	mov	r3, r3, lsr #21
     870:	e1a02aa2 	mov	r2, r2, lsr #21
     874:	e5013fdf 	str	r3, [r1, #-4063]
     878:	e5012fdf 	str	r2, [r1, #-4063]
     87c:	e5113fdb 	ldr	r3, [r1, #-4059]
     880:	e3130b01 	tst	r3, #1024	; 0x400
     884:	e5de0000 	ldrb	r0, [lr]
     888:	1a000003 	bne	89c <main+0x888>
     88c:	e1a02001 	mov	r2, r1
     890:	e5123fdb 	ldr	r3, [r2, #-4059]
     894:	e3130b01 	tst	r3, #1024	; 0x400
     898:	0afffffc 	beq	890 <main+0x87c>
     89c:	e28cc001 	add	ip, ip, #1	; 0x1
     8a0:	e3e02a01 	mvn	r2, #4096	; 0x1000
     8a4:	e3801b01 	orr	r1, r0, #1024	; 0x400
     8a8:	e3803c07 	orr	r3, r0, #1792	; 0x700
     8ac:	e35c0064 	cmp	ip, #100	; 0x64
     8b0:	e5023fdf 	str	r3, [r2, #-4063]
     8b4:	e28ee001 	add	lr, lr, #1	; 0x1
     8b8:	e5021fdf 	str	r1, [r2, #-4063]
     8bc:	1affffc5 	bne	7d8 <main+0x7c4>
     8c0:	e3a03d27 	mov	r3, #2496	; 0x9c0
     8c4:	e2877032 	add	r7, r7, #50	; 0x32
     8c8:	e2833004 	add	r3, r3, #4	; 0x4
     8cc:	e1570003 	cmp	r7, r3
     8d0:	e2866001 	add	r6, r6, #1	; 0x1
     8d4:	1affffbb 	bne	7c8 <main+0x7b4>
     8d8:	e3a07000 	mov	r7, #0	; 0x0
     8dc:	e3a06096 	mov	r6, #150	; 0x96
     8e0:	e087e008 	add	lr, r7, r8
     8e4:	e3a0c032 	mov	ip, #50	; 0x32
     8e8:	e3865c06 	orr	r5, r6, #1536	; 0x600
     8ec:	e3864b01 	orr	r4, r6, #1024	; 0x400
     8f0:	e3e02a01 	mvn	r2, #4096	; 0x1000
     8f4:	e5123fdb 	ldr	r3, [r2, #-4059]
     8f8:	e3130b01 	tst	r3, #1024	; 0x400
     8fc:	0afffffc 	beq	8f4 <main+0x8e0>
     900:	e3a03c06 	mov	r3, #1536	; 0x600
     904:	e3a02b01 	mov	r2, #1024	; 0x400
     908:	e3e01a01 	mvn	r1, #4096	; 0x1000
     90c:	e2833003 	add	r3, r3, #3	; 0x3
     910:	e2822003 	add	r2, r2, #3	; 0x3
     914:	e5013fdf 	str	r3, [r1, #-4063]
     918:	e5012fdf 	str	r2, [r1, #-4063]
     91c:	e5113fdb 	ldr	r3, [r1, #-4059]
     920:	e3130b01 	tst	r3, #1024	; 0x400
     924:	1a000003 	bne	938 <main+0x924>
     928:	e1a02001 	mov	r2, r1
     92c:	e5123fdb 	ldr	r3, [r2, #-4059]
     930:	e3130b01 	tst	r3, #1024	; 0x400
     934:	0afffffc 	beq	92c <main+0x918>
     938:	e1a03a85 	mov	r3, r5, lsl #21
     93c:	e1a02a84 	mov	r2, r4, lsl #21
     940:	e3e01a01 	mvn	r1, #4096	; 0x1000
     944:	e1a03aa3 	mov	r3, r3, lsr #21
     948:	e1a02aa2 	mov	r2, r2, lsr #21
     94c:	e5013fdf 	str	r3, [r1, #-4063]
     950:	e5012fdf 	str	r2, [r1, #-4063]
     954:	e5113fdb 	ldr	r3, [r1, #-4059]
     958:	e3130b01 	tst	r3, #1024	; 0x400
     95c:	1a000003 	bne	970 <main+0x95c>
     960:	e1a02001 	mov	r2, r1
     964:	e5123fdb 	ldr	r3, [r2, #-4059]
     968:	e3130b01 	tst	r3, #1024	; 0x400
     96c:	0afffffc 	beq	964 <main+0x950>
     970:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     974:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     978:	e1a03a83 	mov	r3, r3, lsl #21
     97c:	e1a02a82 	mov	r2, r2, lsl #21
     980:	e3e01a01 	mvn	r1, #4096	; 0x1000
     984:	e1a03aa3 	mov	r3, r3, lsr #21
     988:	e1a02aa2 	mov	r2, r2, lsr #21
     98c:	e5013fdf 	str	r3, [r1, #-4063]
     990:	e5012fdf 	str	r2, [r1, #-4063]
     994:	e5113fdb 	ldr	r3, [r1, #-4059]
     998:	e3130b01 	tst	r3, #1024	; 0x400
     99c:	e5de0000 	ldrb	r0, [lr]
     9a0:	1a000003 	bne	9b4 <main+0x9a0>
     9a4:	e1a02001 	mov	r2, r1
     9a8:	e5123fdb 	ldr	r3, [r2, #-4059]
     9ac:	e3130b01 	tst	r3, #1024	; 0x400
     9b0:	0afffffc 	beq	9a8 <main+0x994>
     9b4:	e28cc001 	add	ip, ip, #1	; 0x1
     9b8:	e3e02a01 	mvn	r2, #4096	; 0x1000
     9bc:	e3801b01 	orr	r1, r0, #1024	; 0x400
     9c0:	e3803c07 	orr	r3, r0, #1792	; 0x700
     9c4:	e35c0064 	cmp	ip, #100	; 0x64
     9c8:	e5023fdf 	str	r3, [r2, #-4063]
     9cc:	e28ee001 	add	lr, lr, #1	; 0x1
     9d0:	e5021fdf 	str	r1, [r2, #-4063]
     9d4:	1affffc5 	bne	8f0 <main+0x8dc>
     9d8:	e3a03d27 	mov	r3, #2496	; 0x9c0
     9dc:	e2877032 	add	r7, r7, #50	; 0x32
     9e0:	e2833004 	add	r3, r3, #4	; 0x4
     9e4:	e1570003 	cmp	r7, r3
     9e8:	e2866001 	add	r6, r6, #1	; 0x1
     9ec:	1affffbb 	bne	8e0 <main+0x8cc>
     9f0:	e3a07000 	mov	r7, #0	; 0x0
     9f4:	e3a060c8 	mov	r6, #200	; 0xc8
     9f8:	e087e008 	add	lr, r7, r8
     9fc:	e3a0c032 	mov	ip, #50	; 0x32
     a00:	e3865c06 	orr	r5, r6, #1536	; 0x600
     a04:	e3864b01 	orr	r4, r6, #1024	; 0x400
     a08:	e3e02a01 	mvn	r2, #4096	; 0x1000
     a0c:	e5123fdb 	ldr	r3, [r2, #-4059]
     a10:	e3130b01 	tst	r3, #1024	; 0x400
     a14:	0afffffc 	beq	a0c <main+0x9f8>
     a18:	e3a03c06 	mov	r3, #1536	; 0x600
     a1c:	e3a02b01 	mov	r2, #1024	; 0x400
     a20:	e3e01a01 	mvn	r1, #4096	; 0x1000
     a24:	e2833003 	add	r3, r3, #3	; 0x3
     a28:	e2822003 	add	r2, r2, #3	; 0x3
     a2c:	e5013fdf 	str	r3, [r1, #-4063]
     a30:	e5012fdf 	str	r2, [r1, #-4063]
     a34:	e5113fdb 	ldr	r3, [r1, #-4059]
     a38:	e3130b01 	tst	r3, #1024	; 0x400
     a3c:	1a000003 	bne	a50 <main+0xa3c>
     a40:	e1a02001 	mov	r2, r1
     a44:	e5123fdb 	ldr	r3, [r2, #-4059]
     a48:	e3130b01 	tst	r3, #1024	; 0x400
     a4c:	0afffffc 	beq	a44 <main+0xa30>
     a50:	e1a03a85 	mov	r3, r5, lsl #21
     a54:	e1a02a84 	mov	r2, r4, lsl #21
     a58:	e3e01a01 	mvn	r1, #4096	; 0x1000
     a5c:	e1a03aa3 	mov	r3, r3, lsr #21
     a60:	e1a02aa2 	mov	r2, r2, lsr #21
     a64:	e5013fdf 	str	r3, [r1, #-4063]
     a68:	e5012fdf 	str	r2, [r1, #-4063]
     a6c:	e5113fdb 	ldr	r3, [r1, #-4059]
     a70:	e3130b01 	tst	r3, #1024	; 0x400
     a74:	1a000003 	bne	a88 <main+0xa74>
     a78:	e1a02001 	mov	r2, r1
     a7c:	e5123fdb 	ldr	r3, [r2, #-4059]
     a80:	e3130b01 	tst	r3, #1024	; 0x400
     a84:	0afffffc 	beq	a7c <main+0xa68>
     a88:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     a8c:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     a90:	e1a03a83 	mov	r3, r3, lsl #21
     a94:	e1a02a82 	mov	r2, r2, lsl #21
     a98:	e3e01a01 	mvn	r1, #4096	; 0x1000
     a9c:	e1a03aa3 	mov	r3, r3, lsr #21
     aa0:	e1a02aa2 	mov	r2, r2, lsr #21
     aa4:	e5013fdf 	str	r3, [r1, #-4063]
     aa8:	e5012fdf 	str	r2, [r1, #-4063]
     aac:	e5113fdb 	ldr	r3, [r1, #-4059]
     ab0:	e3130b01 	tst	r3, #1024	; 0x400
     ab4:	e5de0000 	ldrb	r0, [lr]
     ab8:	1a000003 	bne	acc <main+0xab8>
     abc:	e1a02001 	mov	r2, r1
     ac0:	e5123fdb 	ldr	r3, [r2, #-4059]
     ac4:	e3130b01 	tst	r3, #1024	; 0x400
     ac8:	0afffffc 	beq	ac0 <main+0xaac>
     acc:	e28cc001 	add	ip, ip, #1	; 0x1
     ad0:	e3e02a01 	mvn	r2, #4096	; 0x1000
     ad4:	e3801b01 	orr	r1, r0, #1024	; 0x400
     ad8:	e3803c07 	orr	r3, r0, #1792	; 0x700
     adc:	e35c0064 	cmp	ip, #100	; 0x64
     ae0:	e5023fdf 	str	r3, [r2, #-4063]
     ae4:	e28ee001 	add	lr, lr, #1	; 0x1
     ae8:	e5021fdf 	str	r1, [r2, #-4063]
     aec:	1affffc5 	bne	a08 <main+0x9f4>
     af0:	e3a03d27 	mov	r3, #2496	; 0x9c0
     af4:	e2877032 	add	r7, r7, #50	; 0x32
     af8:	e2833004 	add	r3, r3, #4	; 0x4
     afc:	e1570003 	cmp	r7, r3
     b00:	e2866001 	add	r6, r6, #1	; 0x1
     b04:	1affffbb 	bne	9f8 <main+0x9e4>
     b08:	e3a04000 	mov	r4, #0	; 0x0
     b0c:	e1a07004 	mov	r7, r4
     b10:	e087e008 	add	lr, r7, r8
     b14:	e3a0c064 	mov	ip, #100	; 0x64
     b18:	e3846c06 	orr	r6, r4, #1536	; 0x600
     b1c:	e3845b01 	orr	r5, r4, #1024	; 0x400
     b20:	e3e02a01 	mvn	r2, #4096	; 0x1000
     b24:	e5123fdb 	ldr	r3, [r2, #-4059]
     b28:	e3130b01 	tst	r3, #1024	; 0x400
     b2c:	0afffffc 	beq	b24 <main+0xb10>
     b30:	e3a03c06 	mov	r3, #1536	; 0x600
     b34:	e3a02b01 	mov	r2, #1024	; 0x400
     b38:	e3e01a01 	mvn	r1, #4096	; 0x1000
     b3c:	e2833003 	add	r3, r3, #3	; 0x3
     b40:	e2822003 	add	r2, r2, #3	; 0x3
     b44:	e5013fdf 	str	r3, [r1, #-4063]
     b48:	e5012fdf 	str	r2, [r1, #-4063]
     b4c:	e5113fdb 	ldr	r3, [r1, #-4059]
     b50:	e3130b01 	tst	r3, #1024	; 0x400
     b54:	1a000003 	bne	b68 <main+0xb54>
     b58:	e1a02001 	mov	r2, r1
     b5c:	e5123fdb 	ldr	r3, [r2, #-4059]
     b60:	e3130b01 	tst	r3, #1024	; 0x400
     b64:	0afffffc 	beq	b5c <main+0xb48>
     b68:	e1a03a86 	mov	r3, r6, lsl #21
     b6c:	e1a02a85 	mov	r2, r5, lsl #21
     b70:	e3e01a01 	mvn	r1, #4096	; 0x1000
     b74:	e1a03aa3 	mov	r3, r3, lsr #21
     b78:	e1a02aa2 	mov	r2, r2, lsr #21
     b7c:	e5013fdf 	str	r3, [r1, #-4063]
     b80:	e5012fdf 	str	r2, [r1, #-4063]
     b84:	e5113fdb 	ldr	r3, [r1, #-4059]
     b88:	e3130b01 	tst	r3, #1024	; 0x400
     b8c:	1a000003 	bne	ba0 <main+0xb8c>
     b90:	e1a02001 	mov	r2, r1
     b94:	e5123fdb 	ldr	r3, [r2, #-4059]
     b98:	e3130b01 	tst	r3, #1024	; 0x400
     b9c:	0afffffc 	beq	b94 <main+0xb80>
     ba0:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     ba4:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     ba8:	e1a03a83 	mov	r3, r3, lsl #21
     bac:	e1a02a82 	mov	r2, r2, lsl #21
     bb0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     bb4:	e1a03aa3 	mov	r3, r3, lsr #21
     bb8:	e1a02aa2 	mov	r2, r2, lsr #21
     bbc:	e5013fdf 	str	r3, [r1, #-4063]
     bc0:	e5012fdf 	str	r2, [r1, #-4063]
     bc4:	e5113fdb 	ldr	r3, [r1, #-4059]
     bc8:	e3130b01 	tst	r3, #1024	; 0x400
     bcc:	e5de0000 	ldrb	r0, [lr]
     bd0:	1a000003 	bne	be4 <main+0xbd0>
     bd4:	e1a02001 	mov	r2, r1
     bd8:	e5123fdb 	ldr	r3, [r2, #-4059]
     bdc:	e3130b01 	tst	r3, #1024	; 0x400
     be0:	0afffffc 	beq	bd8 <main+0xbc4>
     be4:	e28cc001 	add	ip, ip, #1	; 0x1
     be8:	e3e02a01 	mvn	r2, #4096	; 0x1000
     bec:	e3801b01 	orr	r1, r0, #1024	; 0x400
     bf0:	e3803c07 	orr	r3, r0, #1792	; 0x700
     bf4:	e35c0096 	cmp	ip, #150	; 0x96
     bf8:	e5023fdf 	str	r3, [r2, #-4063]
     bfc:	e28ee001 	add	lr, lr, #1	; 0x1
     c00:	e5021fdf 	str	r1, [r2, #-4063]
     c04:	1affffc5 	bne	b20 <main+0xb0c>
     c08:	e2844001 	add	r4, r4, #1	; 0x1
     c0c:	e3540032 	cmp	r4, #50	; 0x32
     c10:	e2877032 	add	r7, r7, #50	; 0x32
     c14:	1affffbd 	bne	b10 <main+0xafc>
     c18:	e1a06004 	mov	r6, r4
     c1c:	e3a07000 	mov	r7, #0	; 0x0
     c20:	e087e008 	add	lr, r7, r8
     c24:	e3a0c064 	mov	ip, #100	; 0x64
     c28:	e3865c06 	orr	r5, r6, #1536	; 0x600
     c2c:	e3864b01 	orr	r4, r6, #1024	; 0x400
     c30:	e3e02a01 	mvn	r2, #4096	; 0x1000
     c34:	e5123fdb 	ldr	r3, [r2, #-4059]
     c38:	e3130b01 	tst	r3, #1024	; 0x400
     c3c:	0afffffc 	beq	c34 <main+0xc20>
     c40:	e3a03c06 	mov	r3, #1536	; 0x600
     c44:	e3a02b01 	mov	r2, #1024	; 0x400
     c48:	e3e01a01 	mvn	r1, #4096	; 0x1000
     c4c:	e2833003 	add	r3, r3, #3	; 0x3
     c50:	e2822003 	add	r2, r2, #3	; 0x3
     c54:	e5013fdf 	str	r3, [r1, #-4063]
     c58:	e5012fdf 	str	r2, [r1, #-4063]
     c5c:	e5113fdb 	ldr	r3, [r1, #-4059]
     c60:	e3130b01 	tst	r3, #1024	; 0x400
     c64:	1a000003 	bne	c78 <main+0xc64>
     c68:	e1a02001 	mov	r2, r1
     c6c:	e5123fdb 	ldr	r3, [r2, #-4059]
     c70:	e3130b01 	tst	r3, #1024	; 0x400
     c74:	0afffffc 	beq	c6c <main+0xc58>
     c78:	e1a03a85 	mov	r3, r5, lsl #21
     c7c:	e1a02a84 	mov	r2, r4, lsl #21
     c80:	e3e01a01 	mvn	r1, #4096	; 0x1000
     c84:	e1a03aa3 	mov	r3, r3, lsr #21
     c88:	e1a02aa2 	mov	r2, r2, lsr #21
     c8c:	e5013fdf 	str	r3, [r1, #-4063]
     c90:	e5012fdf 	str	r2, [r1, #-4063]
     c94:	e5113fdb 	ldr	r3, [r1, #-4059]
     c98:	e3130b01 	tst	r3, #1024	; 0x400
     c9c:	1a000003 	bne	cb0 <main+0xc9c>
     ca0:	e1a02001 	mov	r2, r1
     ca4:	e5123fdb 	ldr	r3, [r2, #-4059]
     ca8:	e3130b01 	tst	r3, #1024	; 0x400
     cac:	0afffffc 	beq	ca4 <main+0xc90>
     cb0:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     cb4:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     cb8:	e1a03a83 	mov	r3, r3, lsl #21
     cbc:	e1a02a82 	mov	r2, r2, lsl #21
     cc0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     cc4:	e1a03aa3 	mov	r3, r3, lsr #21
     cc8:	e1a02aa2 	mov	r2, r2, lsr #21
     ccc:	e5013fdf 	str	r3, [r1, #-4063]
     cd0:	e5012fdf 	str	r2, [r1, #-4063]
     cd4:	e5113fdb 	ldr	r3, [r1, #-4059]
     cd8:	e3130b01 	tst	r3, #1024	; 0x400
     cdc:	e5de0000 	ldrb	r0, [lr]
     ce0:	1a000003 	bne	cf4 <main+0xce0>
     ce4:	e1a02001 	mov	r2, r1
     ce8:	e5123fdb 	ldr	r3, [r2, #-4059]
     cec:	e3130b01 	tst	r3, #1024	; 0x400
     cf0:	0afffffc 	beq	ce8 <main+0xcd4>
     cf4:	e28cc001 	add	ip, ip, #1	; 0x1
     cf8:	e3e02a01 	mvn	r2, #4096	; 0x1000
     cfc:	e3801b01 	orr	r1, r0, #1024	; 0x400
     d00:	e3803c07 	orr	r3, r0, #1792	; 0x700
     d04:	e35c0096 	cmp	ip, #150	; 0x96
     d08:	e5023fdf 	str	r3, [r2, #-4063]
     d0c:	e28ee001 	add	lr, lr, #1	; 0x1
     d10:	e5021fdf 	str	r1, [r2, #-4063]
     d14:	1affffc5 	bne	c30 <main+0xc1c>
     d18:	e3a03d27 	mov	r3, #2496	; 0x9c0
     d1c:	e2877032 	add	r7, r7, #50	; 0x32
     d20:	e2833004 	add	r3, r3, #4	; 0x4
     d24:	e1570003 	cmp	r7, r3
     d28:	e2866001 	add	r6, r6, #1	; 0x1
     d2c:	1affffbb 	bne	c20 <main+0xc0c>
     d30:	e3a07000 	mov	r7, #0	; 0x0
     d34:	e3a06064 	mov	r6, #100	; 0x64
     d38:	e087e008 	add	lr, r7, r8
     d3c:	e3a0c064 	mov	ip, #100	; 0x64
     d40:	e3865c06 	orr	r5, r6, #1536	; 0x600
     d44:	e3864b01 	orr	r4, r6, #1024	; 0x400
     d48:	e3e02a01 	mvn	r2, #4096	; 0x1000
     d4c:	e5123fdb 	ldr	r3, [r2, #-4059]
     d50:	e3130b01 	tst	r3, #1024	; 0x400
     d54:	0afffffc 	beq	d4c <main+0xd38>
     d58:	e3a03c06 	mov	r3, #1536	; 0x600
     d5c:	e3a02b01 	mov	r2, #1024	; 0x400
     d60:	e3e01a01 	mvn	r1, #4096	; 0x1000
     d64:	e2833003 	add	r3, r3, #3	; 0x3
     d68:	e2822003 	add	r2, r2, #3	; 0x3
     d6c:	e5013fdf 	str	r3, [r1, #-4063]
     d70:	e5012fdf 	str	r2, [r1, #-4063]
     d74:	e5113fdb 	ldr	r3, [r1, #-4059]
     d78:	e3130b01 	tst	r3, #1024	; 0x400
     d7c:	1a000003 	bne	d90 <main+0xd7c>
     d80:	e1a02001 	mov	r2, r1
     d84:	e5123fdb 	ldr	r3, [r2, #-4059]
     d88:	e3130b01 	tst	r3, #1024	; 0x400
     d8c:	0afffffc 	beq	d84 <main+0xd70>
     d90:	e1a03a85 	mov	r3, r5, lsl #21
     d94:	e1a02a84 	mov	r2, r4, lsl #21
     d98:	e3e01a01 	mvn	r1, #4096	; 0x1000
     d9c:	e1a03aa3 	mov	r3, r3, lsr #21
     da0:	e1a02aa2 	mov	r2, r2, lsr #21
     da4:	e5013fdf 	str	r3, [r1, #-4063]
     da8:	e5012fdf 	str	r2, [r1, #-4063]
     dac:	e5113fdb 	ldr	r3, [r1, #-4059]
     db0:	e3130b01 	tst	r3, #1024	; 0x400
     db4:	1a000003 	bne	dc8 <main+0xdb4>
     db8:	e1a02001 	mov	r2, r1
     dbc:	e5123fdb 	ldr	r3, [r2, #-4059]
     dc0:	e3130b01 	tst	r3, #1024	; 0x400
     dc4:	0afffffc 	beq	dbc <main+0xda8>
     dc8:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     dcc:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     dd0:	e1a03a83 	mov	r3, r3, lsl #21
     dd4:	e1a02a82 	mov	r2, r2, lsl #21
     dd8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     ddc:	e1a03aa3 	mov	r3, r3, lsr #21
     de0:	e1a02aa2 	mov	r2, r2, lsr #21
     de4:	e5013fdf 	str	r3, [r1, #-4063]
     de8:	e5012fdf 	str	r2, [r1, #-4063]
     dec:	e5113fdb 	ldr	r3, [r1, #-4059]
     df0:	e3130b01 	tst	r3, #1024	; 0x400
     df4:	e5de0000 	ldrb	r0, [lr]
     df8:	1a000003 	bne	e0c <main+0xdf8>
     dfc:	e1a02001 	mov	r2, r1
     e00:	e5123fdb 	ldr	r3, [r2, #-4059]
     e04:	e3130b01 	tst	r3, #1024	; 0x400
     e08:	0afffffc 	beq	e00 <main+0xdec>
     e0c:	e28cc001 	add	ip, ip, #1	; 0x1
     e10:	e3e02a01 	mvn	r2, #4096	; 0x1000
     e14:	e3801b01 	orr	r1, r0, #1024	; 0x400
     e18:	e3803c07 	orr	r3, r0, #1792	; 0x700
     e1c:	e35c0096 	cmp	ip, #150	; 0x96
     e20:	e5023fdf 	str	r3, [r2, #-4063]
     e24:	e28ee001 	add	lr, lr, #1	; 0x1
     e28:	e5021fdf 	str	r1, [r2, #-4063]
     e2c:	1affffc5 	bne	d48 <main+0xd34>
     e30:	e3a03d27 	mov	r3, #2496	; 0x9c0
     e34:	e2877032 	add	r7, r7, #50	; 0x32
     e38:	e2833004 	add	r3, r3, #4	; 0x4
     e3c:	e1570003 	cmp	r7, r3
     e40:	e2866001 	add	r6, r6, #1	; 0x1
     e44:	1affffbb 	bne	d38 <main+0xd24>
     e48:	e1a0600c 	mov	r6, ip
     e4c:	e3a07000 	mov	r7, #0	; 0x0
     e50:	e087e008 	add	lr, r7, r8
     e54:	e3a0c064 	mov	ip, #100	; 0x64
     e58:	e3865c06 	orr	r5, r6, #1536	; 0x600
     e5c:	e3864b01 	orr	r4, r6, #1024	; 0x400
     e60:	e3e02a01 	mvn	r2, #4096	; 0x1000
     e64:	e5123fdb 	ldr	r3, [r2, #-4059]
     e68:	e3130b01 	tst	r3, #1024	; 0x400
     e6c:	0afffffc 	beq	e64 <main+0xe50>
     e70:	e3a03c06 	mov	r3, #1536	; 0x600
     e74:	e3a02b01 	mov	r2, #1024	; 0x400
     e78:	e3e01a01 	mvn	r1, #4096	; 0x1000
     e7c:	e2833003 	add	r3, r3, #3	; 0x3
     e80:	e2822003 	add	r2, r2, #3	; 0x3
     e84:	e5013fdf 	str	r3, [r1, #-4063]
     e88:	e5012fdf 	str	r2, [r1, #-4063]
     e8c:	e5113fdb 	ldr	r3, [r1, #-4059]
     e90:	e3130b01 	tst	r3, #1024	; 0x400
     e94:	1a000003 	bne	ea8 <main+0xe94>
     e98:	e1a02001 	mov	r2, r1
     e9c:	e5123fdb 	ldr	r3, [r2, #-4059]
     ea0:	e3130b01 	tst	r3, #1024	; 0x400
     ea4:	0afffffc 	beq	e9c <main+0xe88>
     ea8:	e1a03a85 	mov	r3, r5, lsl #21
     eac:	e1a02a84 	mov	r2, r4, lsl #21
     eb0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     eb4:	e1a03aa3 	mov	r3, r3, lsr #21
     eb8:	e1a02aa2 	mov	r2, r2, lsr #21
     ebc:	e5013fdf 	str	r3, [r1, #-4063]
     ec0:	e5012fdf 	str	r2, [r1, #-4063]
     ec4:	e5113fdb 	ldr	r3, [r1, #-4059]
     ec8:	e3130b01 	tst	r3, #1024	; 0x400
     ecc:	1a000003 	bne	ee0 <main+0xecc>
     ed0:	e1a02001 	mov	r2, r1
     ed4:	e5123fdb 	ldr	r3, [r2, #-4059]
     ed8:	e3130b01 	tst	r3, #1024	; 0x400
     edc:	0afffffc 	beq	ed4 <main+0xec0>
     ee0:	e38c3c06 	orr	r3, ip, #1536	; 0x600
     ee4:	e38c2b01 	orr	r2, ip, #1024	; 0x400
     ee8:	e1a03a83 	mov	r3, r3, lsl #21
     eec:	e1a02a82 	mov	r2, r2, lsl #21
     ef0:	e3e01a01 	mvn	r1, #4096	; 0x1000
     ef4:	e1a03aa3 	mov	r3, r3, lsr #21
     ef8:	e1a02aa2 	mov	r2, r2, lsr #21
     efc:	e5013fdf 	str	r3, [r1, #-4063]
     f00:	e5012fdf 	str	r2, [r1, #-4063]
     f04:	e5113fdb 	ldr	r3, [r1, #-4059]
     f08:	e3130b01 	tst	r3, #1024	; 0x400
     f0c:	e5de0000 	ldrb	r0, [lr]
     f10:	1a000003 	bne	f24 <main+0xf10>
     f14:	e1a02001 	mov	r2, r1
     f18:	e5123fdb 	ldr	r3, [r2, #-4059]
     f1c:	e3130b01 	tst	r3, #1024	; 0x400
     f20:	0afffffc 	beq	f18 <main+0xf04>
     f24:	e28cc001 	add	ip, ip, #1	; 0x1
     f28:	e3e02a01 	mvn	r2, #4096	; 0x1000
     f2c:	e3801b01 	orr	r1, r0, #1024	; 0x400
     f30:	e3803c07 	orr	r3, r0, #1792	; 0x700
     f34:	e35c0096 	cmp	ip, #150	; 0x96
     f38:	e5023fdf 	str	r3, [r2, #-4063]
     f3c:	e28ee001 	add	lr, lr, #1	; 0x1
     f40:	e5021fdf 	str	r1, [r2, #-4063]
     f44:	1affffc5 	bne	e60 <main+0xe4c>
     f48:	e3a03d27 	mov	r3, #2496	; 0x9c0
     f4c:	e2877032 	add	r7, r7, #50	; 0x32
     f50:	e2833004 	add	r3, r3, #4	; 0x4
     f54:	e1570003 	cmp	r7, r3
     f58:	e2866001 	add	r6, r6, #1	; 0x1
     f5c:	1affffbb 	bne	e50 <main+0xe3c>
     f60:	e3a07000 	mov	r7, #0	; 0x0
     f64:	e3a060c8 	mov	r6, #200	; 0xc8
     f68:	e087e008 	add	lr, r7, r8
     f6c:	e3a0c064 	mov	ip, #100	; 0x64
     f70:	e3865c06 	orr	r5, r6, #1536	; 0x600
     f74:	e3864b01 	orr	r4, r6, #1024	; 0x400
     f78:	e3e02a01 	mvn	r2, #4096	; 0x1000
     f7c:	e5123fdb 	ldr	r3, [r2, #-4059]
     f80:	e3130b01 	tst	r3, #1024	; 0x400
     f84:	0afffffc 	beq	f7c <main+0xf68>
     f88:	e3a03c06 	mov	r3, #1536	; 0x600
     f8c:	e3a02b01 	mov	r2, #1024	; 0x400
     f90:	e3e01a01 	mvn	r1, #4096	; 0x1000
     f94:	e2833003 	add	r3, r3, #3	; 0x3
     f98:	e2822003 	add	r2, r2, #3	; 0x3
     f9c:	e5013fdf 	str	r3, [r1, #-4063]
     fa0:	e5012fdf 	str	r2, [r1, #-4063]
     fa4:	e5113fdb 	ldr	r3, [r1, #-4059]
     fa8:	e3130b01 	tst	r3, #1024	; 0x400
     fac:	1a000003 	bne	fc0 <main+0xfac>
     fb0:	e1a02001 	mov	r2, r1
     fb4:	e5123fdb 	ldr	r3, [r2, #-4059]
     fb8:	e3130b01 	tst	r3, #1024	; 0x400
     fbc:	0afffffc 	beq	fb4 <main+0xfa0>
     fc0:	e1a03a85 	mov	r3, r5, lsl #21
     fc4:	e1a02a84 	mov	r2, r4, lsl #21
     fc8:	e3e01a01 	mvn	r1, #4096	; 0x1000
     fcc:	e1a03aa3 	mov	r3, r3, lsr #21
     fd0:	e1a02aa2 	mov	r2, r2, lsr #21
     fd4:	e5013fdf 	str	r3, [r1, #-4063]
     fd8:	e5012fdf 	str	r2, [r1, #-4063]
     fdc:	e5113fdb 	ldr	r3, [r1, #-4059]
     fe0:	e3130b01 	tst	r3, #1024	; 0x400
     fe4:	1a000005 	bne	1000 <.text+0x1000>
     fe8:	e1a02001 	mov	r2, r1
     fec:	e5123fdb 	ldr	r3, [r2, #-4059]
     ff0:	e3130b01 	tst	r3, #1024	; 0x400
     ff4:	0afffffc 	beq	fec <main+0xfd8>
     ff8:	ea000000 	b	1000 <.text+0x1000>
     ffc:	000015e0 	andeq	r1, r0, r0, ror #11
    1000:	e38c3c06 	orr	r3, ip, #1536	; 0x600
    1004:	e38c2b01 	orr	r2, ip, #1024	; 0x400
    1008:	e1a03a83 	mov	r3, r3, lsl #21
    100c:	e1a02a82 	mov	r2, r2, lsl #21
    1010:	e3e01a01 	mvn	r1, #4096	; 0x1000
    1014:	e1a03aa3 	mov	r3, r3, lsr #21
    1018:	e1a02aa2 	mov	r2, r2, lsr #21
    101c:	e5013fdf 	str	r3, [r1, #-4063]
    1020:	e5012fdf 	str	r2, [r1, #-4063]
    1024:	e5113fdb 	ldr	r3, [r1, #-4059]
    1028:	e3130b01 	tst	r3, #1024	; 0x400
    102c:	e5de0000 	ldrb	r0, [lr]
    1030:	1a000003 	bne	1044 <.text+0x1044>
    1034:	e1a02001 	mov	r2, r1
    1038:	e5123fdb 	ldr	r3, [r2, #-4059]
    103c:	e3130b01 	tst	r3, #1024	; 0x400
    1040:	0afffffc 	beq	1038 <.text+0x1038>
    1044:	e28cc001 	add	ip, ip, #1	; 0x1
    1048:	e3e02a01 	mvn	r2, #4096	; 0x1000
    104c:	e3801b01 	orr	r1, r0, #1024	; 0x400
    1050:	e3803c07 	orr	r3, r0, #1792	; 0x700
    1054:	e35c0096 	cmp	ip, #150	; 0x96
    1058:	e5023fdf 	str	r3, [r2, #-4063]
    105c:	e28ee001 	add	lr, lr, #1	; 0x1
    1060:	e5021fdf 	str	r1, [r2, #-4063]
    1064:	1affffc3 	bne	f78 <main+0xf64>
    1068:	e3a03d27 	mov	r3, #2496	; 0x9c0
    106c:	e2877032 	add	r7, r7, #50	; 0x32
    1070:	e2833004 	add	r3, r3, #4	; 0x4
    1074:	e1570003 	cmp	r7, r3
    1078:	e2866001 	add	r6, r6, #1	; 0x1
    107c:	1affffb9 	bne	f68 <main+0xf54>
    1080:	e3a04000 	mov	r4, #0	; 0x0
    1084:	e1a07004 	mov	r7, r4
    1088:	e087e008 	add	lr, r7, r8
    108c:	e3a0c096 	mov	ip, #150	; 0x96
    1090:	e3846c06 	orr	r6, r4, #1536	; 0x600
    1094:	e3845b01 	orr	r5, r4, #1024	; 0x400
    1098:	e3e02a01 	mvn	r2, #4096	; 0x1000
    109c:	e5123fdb 	ldr	r3, [r2, #-4059]
    10a0:	e3130b01 	tst	r3, #1024	; 0x400
    10a4:	0afffffc 	beq	109c <.text+0x109c>
    10a8:	e3a03c06 	mov	r3, #1536	; 0x600
    10ac:	e3a02b01 	mov	r2, #1024	; 0x400
    10b0:	e3e01a01 	mvn	r1, #4096	; 0x1000
    10b4:	e2833003 	add	r3, r3, #3	; 0x3
    10b8:	e2822003 	add	r2, r2, #3	; 0x3
    10bc:	e5013fdf 	str	r3, [r1, #-4063]
    10c0:	e5012fdf 	str	r2, [r1, #-4063]
    10c4:	e5113fdb 	ldr	r3, [r1, #-4059]
    10c8:	e3130b01 	tst	r3, #1024	; 0x400
    10cc:	1a000003 	bne	10e0 <.text+0x10e0>
    10d0:	e1a02001 	mov	r2, r1
    10d4:	e5123fdb 	ldr	r3, [r2, #-4059]
    10d8:	e3130b01 	tst	r3, #1024	; 0x400
    10dc:	0afffffc 	beq	10d4 <.text+0x10d4>
    10e0:	e1a03a86 	mov	r3, r6, lsl #21
    10e4:	e1a02a85 	mov	r2, r5, lsl #21
    10e8:	e3e01a01 	mvn	r1, #4096	; 0x1000
    10ec:	e1a03aa3 	mov	r3, r3, lsr #21
    10f0:	e1a02aa2 	mov	r2, r2, lsr #21
    10f4:	e5013fdf 	str	r3, [r1, #-4063]
    10f8:	e5012fdf 	str	r2, [r1, #-4063]
    10fc:	e5113fdb 	ldr	r3, [r1, #-4059]
    1100:	e3130b01 	tst	r3, #1024	; 0x400
    1104:	1a000003 	bne	1118 <.text+0x1118>
    1108:	e1a02001 	mov	r2, r1
    110c:	e5123fdb 	ldr	r3, [r2, #-4059]
    1110:	e3130b01 	tst	r3, #1024	; 0x400
    1114:	0afffffc 	beq	110c <.text+0x110c>
    1118:	e38c3c06 	orr	r3, ip, #1536	; 0x600
    111c:	e38c2b01 	orr	r2, ip, #1024	; 0x400
    1120:	e1a03a83 	mov	r3, r3, lsl #21
    1124:	e1a02a82 	mov	r2, r2, lsl #21
    1128:	e3e01a01 	mvn	r1, #4096	; 0x1000
    112c:	e1a03aa3 	mov	r3, r3, lsr #21
    1130:	e1a02aa2 	mov	r2, r2, lsr #21
    1134:	e5013fdf 	str	r3, [r1, #-4063]
    1138:	e5012fdf 	str	r2, [r1, #-4063]
    113c:	e5113fdb 	ldr	r3, [r1, #-4059]
    1140:	e3130b01 	tst	r3, #1024	; 0x400
    1144:	e5de0000 	ldrb	r0, [lr]
    1148:	1a000003 	bne	115c <.text+0x115c>
    114c:	e1a02001 	mov	r2, r1
    1150:	e5123fdb 	ldr	r3, [r2, #-4059]
    1154:	e3130b01 	tst	r3, #1024	; 0x400
    1158:	0afffffc 	beq	1150 <.text+0x1150>
    115c:	e28cc001 	add	ip, ip, #1	; 0x1
    1160:	e3e02a01 	mvn	r2, #4096	; 0x1000
    1164:	e3801b01 	orr	r1, r0, #1024	; 0x400
    1168:	e3803c07 	orr	r3, r0, #1792	; 0x700
    116c:	e35c00c8 	cmp	ip, #200	; 0xc8
    1170:	e5023fdf 	str	r3, [r2, #-4063]
    1174:	e28ee001 	add	lr, lr, #1	; 0x1
    1178:	e5021fdf 	str	r1, [r2, #-4063]
    117c:	1affffc5 	bne	1098 <.text+0x1098>
    1180:	e2844001 	add	r4, r4, #1	; 0x1
    1184:	e3540032 	cmp	r4, #50	; 0x32
    1188:	e2877032 	add	r7, r7, #50	; 0x32
    118c:	1affffbd 	bne	1088 <.text+0x1088>
    1190:	e1a06004 	mov	r6, r4
    1194:	e3a07000 	mov	r7, #0	; 0x0
    1198:	e087e008 	add	lr, r7, r8
    119c:	e3a0c096 	mov	ip, #150	; 0x96
    11a0:	e3865c06 	orr	r5, r6, #1536	; 0x600
    11a4:	e3864b01 	orr	r4, r6, #1024	; 0x400
    11a8:	e3e02a01 	mvn	r2, #4096	; 0x1000
    11ac:	e5123fdb 	ldr	r3, [r2, #-4059]
    11b0:	e3130b01 	tst	r3, #1024	; 0x400
    11b4:	0afffffc 	beq	11ac <.text+0x11ac>
    11b8:	e3a03c06 	mov	r3, #1536	; 0x600
    11bc:	e3a02b01 	mov	r2, #1024	; 0x400
    11c0:	e3e01a01 	mvn	r1, #4096	; 0x1000
    11c4:	e2833003 	add	r3, r3, #3	; 0x3
    11c8:	e2822003 	add	r2, r2, #3	; 0x3
    11cc:	e5013fdf 	str	r3, [r1, #-4063]
    11d0:	e5012fdf 	str	r2, [r1, #-4063]
    11d4:	e5113fdb 	ldr	r3, [r1, #-4059]
    11d8:	e3130b01 	tst	r3, #1024	; 0x400
    11dc:	1a000003 	bne	11f0 <.text+0x11f0>
    11e0:	e1a02001 	mov	r2, r1
    11e4:	e5123fdb 	ldr	r3, [r2, #-4059]
    11e8:	e3130b01 	tst	r3, #1024	; 0x400
    11ec:	0afffffc 	beq	11e4 <.text+0x11e4>
    11f0:	e1a03a85 	mov	r3, r5, lsl #21
    11f4:	e1a02a84 	mov	r2, r4, lsl #21
    11f8:	e3e01a01 	mvn	r1, #4096	; 0x1000
    11fc:	e1a03aa3 	mov	r3, r3, lsr #21
    1200:	e1a02aa2 	mov	r2, r2, lsr #21
    1204:	e5013fdf 	str	r3, [r1, #-4063]
    1208:	e5012fdf 	str	r2, [r1, #-4063]
    120c:	e5113fdb 	ldr	r3, [r1, #-4059]
    1210:	e3130b01 	tst	r3, #1024	; 0x400
    1214:	1a000003 	bne	1228 <.text+0x1228>
    1218:	e1a02001 	mov	r2, r1
    121c:	e5123fdb 	ldr	r3, [r2, #-4059]
    1220:	e3130b01 	tst	r3, #1024	; 0x400
    1224:	0afffffc 	beq	121c <.text+0x121c>
    1228:	e38c3c06 	orr	r3, ip, #1536	; 0x600
    122c:	e38c2b01 	orr	r2, ip, #1024	; 0x400
    1230:	e1a03a83 	mov	r3, r3, lsl #21
    1234:	e1a02a82 	mov	r2, r2, lsl #21
    1238:	e3e01a01 	mvn	r1, #4096	; 0x1000
    123c:	e1a03aa3 	mov	r3, r3, lsr #21
    1240:	e1a02aa2 	mov	r2, r2, lsr #21
    1244:	e5013fdf 	str	r3, [r1, #-4063]
    1248:	e5012fdf 	str	r2, [r1, #-4063]
    124c:	e5113fdb 	ldr	r3, [r1, #-4059]
    1250:	e3130b01 	tst	r3, #1024	; 0x400
    1254:	e5de0000 	ldrb	r0, [lr]
    1258:	1a000003 	bne	126c <.text+0x126c>
    125c:	e1a02001 	mov	r2, r1
    1260:	e5123fdb 	ldr	r3, [r2, #-4059]
    1264:	e3130b01 	tst	r3, #1024	; 0x400
    1268:	0afffffc 	beq	1260 <.text+0x1260>
    126c:	e28cc001 	add	ip, ip, #1	; 0x1
    1270:	e3e02a01 	mvn	r2, #4096	; 0x1000
    1274:	e3801b01 	orr	r1, r0, #1024	; 0x400
    1278:	e3803c07 	orr	r3, r0, #1792	; 0x700
    127c:	e35c00c8 	cmp	ip, #200	; 0xc8
    1280:	e5023fdf 	str	r3, [r2, #-4063]
    1284:	e28ee001 	add	lr, lr, #1	; 0x1
    1288:	e5021fdf 	str	r1, [r2, #-4063]
    128c:	1affffc5 	bne	11a8 <.text+0x11a8>
    1290:	e3a03d27 	mov	r3, #2496	; 0x9c0
    1294:	e2877032 	add	r7, r7, #50	; 0x32
    1298:	e2833004 	add	r3, r3, #4	; 0x4
    129c:	e1570003 	cmp	r7, r3
    12a0:	e2866001 	add	r6, r6, #1	; 0x1
    12a4:	1affffbb 	bne	1198 <.text+0x1198>
    12a8:	e3a07000 	mov	r7, #0	; 0x0
    12ac:	e3a06064 	mov	r6, #100	; 0x64
    12b0:	e087e008 	add	lr, r7, r8
    12b4:	e3a0c096 	mov	ip, #150	; 0x96
    12b8:	e3865c06 	orr	r5, r6, #1536	; 0x600
    12bc:	e3864b01 	orr	r4, r6, #1024	; 0x400
    12c0:	e3e02a01 	mvn	r2, #4096	; 0x1000
    12c4:	e5123fdb 	ldr	r3, [r2, #-4059]
    12c8:	e3130b01 	tst	r3, #1024	; 0x400
    12cc:	0afffffc 	beq	12c4 <.text+0x12c4>
    12d0:	e3a03c06 	mov	r3, #1536	; 0x600
    12d4:	e3a02b01 	mov	r2, #1024	; 0x400
    12d8:	e3e01a01 	mvn	r1, #4096	; 0x1000
    12dc:	e2833003 	add	r3, r3, #3	; 0x3
    12e0:	e2822003 	add	r2, r2, #3	; 0x3
    12e4:	e5013fdf 	str	r3, [r1, #-4063]
    12e8:	e5012fdf 	str	r2, [r1, #-4063]
    12ec:	e5113fdb 	ldr	r3, [r1, #-4059]
    12f0:	e3130b01 	tst	r3, #1024	; 0x400
    12f4:	1a000003 	bne	1308 <.text+0x1308>
    12f8:	e1a02001 	mov	r2, r1
    12fc:	e5123fdb 	ldr	r3, [r2, #-4059]
    1300:	e3130b01 	tst	r3, #1024	; 0x400
    1304:	0afffffc 	beq	12fc <.text+0x12fc>
    1308:	e1a03a85 	mov	r3, r5, lsl #21
    130c:	e1a02a84 	mov	r2, r4, lsl #21
    1310:	e3e01a01 	mvn	r1, #4096	; 0x1000
    1314:	e1a03aa3 	mov	r3, r3, lsr #21
    1318:	e1a02aa2 	mov	r2, r2, lsr #21
    131c:	e5013fdf 	str	r3, [r1, #-4063]
    1320:	e5012fdf 	str	r2, [r1, #-4063]
    1324:	e5113fdb 	ldr	r3, [r1, #-4059]
    1328:	e3130b01 	tst	r3, #1024	; 0x400
    132c:	1a000003 	bne	1340 <.text+0x1340>
    1330:	e1a02001 	mov	r2, r1
    1334:	e5123fdb 	ldr	r3, [r2, #-4059]
    1338:	e3130b01 	tst	r3, #1024	; 0x400
    133c:	0afffffc 	beq	1334 <.text+0x1334>
    1340:	e38c3c06 	orr	r3, ip, #1536	; 0x600
    1344:	e38c2b01 	orr	r2, ip, #1024	; 0x400
    1348:	e1a03a83 	mov	r3, r3, lsl #21
    134c:	e1a02a82 	mov	r2, r2, lsl #21
    1350:	e3e01a01 	mvn	r1, #4096	; 0x1000
    1354:	e1a03aa3 	mov	r3, r3, lsr #21
    1358:	e1a02aa2 	mov	r2, r2, lsr #21
    135c:	e5013fdf 	str	r3, [r1, #-4063]
    1360:	e5012fdf 	str	r2, [r1, #-4063]
    1364:	e5113fdb 	ldr	r3, [r1, #-4059]
    1368:	e3130b01 	tst	r3, #1024	; 0x400
    136c:	e5de0000 	ldrb	r0, [lr]
    1370:	1a000003 	bne	1384 <.text+0x1384>
    1374:	e1a02001 	mov	r2, r1
    1378:	e5123fdb 	ldr	r3, [r2, #-4059]
    137c:	e3130b01 	tst	r3, #1024	; 0x400
    1380:	0afffffc 	beq	1378 <.text+0x1378>
    1384:	e28cc001 	add	ip, ip, #1	; 0x1
    1388:	e3e02a01 	mvn	r2, #4096	; 0x1000
    138c:	e3801b01 	orr	r1, r0, #1024	; 0x400
    1390:	e3803c07 	orr	r3, r0, #1792	; 0x700
    1394:	e35c00c8 	cmp	ip, #200	; 0xc8
    1398:	e5023fdf 	str	r3, [r2, #-4063]
    139c:	e28ee001 	add	lr, lr, #1	; 0x1
    13a0:	e5021fdf 	str	r1, [r2, #-4063]
    13a4:	1affffc5 	bne	12c0 <.text+0x12c0>
    13a8:	e3a03d27 	mov	r3, #2496	; 0x9c0
    13ac:	e2877032 	add	r7, r7, #50	; 0x32
    13b0:	e2833004 	add	r3, r3, #4	; 0x4
    13b4:	e1570003 	cmp	r7, r3
    13b8:	e2866001 	add	r6, r6, #1	; 0x1
    13bc:	1affffbb 	bne	12b0 <.text+0x12b0>
    13c0:	e3a07000 	mov	r7, #0	; 0x0
    13c4:	e3a06096 	mov	r6, #150	; 0x96
    13c8:	e087e008 	add	lr, r7, r8
    13cc:	e3a0c096 	mov	ip, #150	; 0x96
    13d0:	e3865c06 	orr	r5, r6, #1536	; 0x600
    13d4:	e3864b01 	orr	r4, r6, #1024	; 0x400
		for(j=0; j<WIDTH; j++) {
			
			// header
			arke_oif.data_out = 3;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
    13d8:	e3e02a01 	mvn	r2, #4096	; 0x1000
    13dc:	e5123fdb 	ldr	r3, [r2, #-4059]
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
    13e0:	e3130b01 	tst	r3, #1024	; 0x400
    13e4:	0afffffc 	beq	13dc <.text+0x13dc>
			GPIO_OUT = TO_INTEGER(arke_oif);
    13e8:	e3a03c06 	mov	r3, #1536	; 0x600
			
			arke_oif.tx = 0;
			
			GPIO_OUT = TO_INTEGER(arke_oif);
    13ec:	e3a02b01 	mov	r2, #1024	; 0x400
    13f0:	e3e01a01 	mvn	r1, #4096	; 0x1000
    13f4:	e2833003 	add	r3, r3, #3	; 0x3
    13f8:	e2822003 	add	r2, r2, #3	; 0x3
    13fc:	e5013fdf 	str	r3, [r1, #-4063]
    1400:	e5012fdf 	str	r2, [r1, #-4063]
			
			// line address
			arke_oif.data_out = i+150;
			arke_oif.tx = 1;
		
			stall_go_in = ((GPIO_IN>>10) & 0x1);
    1404:	e5113fdb 	ldr	r3, [r1, #-4059]
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
    1408:	e3130b01 	tst	r3, #1024	; 0x400
    140c:	1a000003 	bne	1420 <.text+0x1420>
    1410:	e1a02001 	mov	r2, r1
    1414:	e5123fdb 	ldr	r3, [r2, #-4059]
    1418:	e3130b01 	tst	r3, #1024	; 0x400
    141c:	0afffffc 	beq	1414 <.text+0x1414>
			GPIO_OUT = TO_INTEGER(arke_oif);
    1420:	e1a03a85 	mov	r3, r5, lsl #21
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
    1424:	e1a02a84 	mov	r2, r4, lsl #21
    1428:	e3e01a01 	mvn	r1, #4096	; 0x1000
    142c:	e1a03aa3 	mov	r3, r3, lsr #21
    1430:	e1a02aa2 	mov	r2, r2, lsr #21
    1434:	e5013fdf 	str	r3, [r1, #-4063]
    1438:	e5012fdf 	str	r2, [r1, #-4063]
			
			// column address
			arke_oif.data_out = j+150;
			arke_oif.tx = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
    143c:	e5113fdb 	ldr	r3, [r1, #-4059]
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
    1440:	e3130b01 	tst	r3, #1024	; 0x400
    1444:	1a000003 	bne	1458 <.text+0x1458>
    1448:	e1a02001 	mov	r2, r1
    144c:	e5123fdb 	ldr	r3, [r2, #-4059]
    1450:	e3130b01 	tst	r3, #1024	; 0x400
    1454:	0afffffc 	beq	144c <.text+0x144c>
			GPIO_OUT = TO_INTEGER(arke_oif);
    1458:	e38c3c06 	orr	r3, ip, #1536	; 0x600
			
			arke_oif.tx = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
    145c:	e38c2b01 	orr	r2, ip, #1024	; 0x400
    1460:	e1a03a83 	mov	r3, r3, lsl #21
    1464:	e1a02a82 	mov	r2, r2, lsl #21
    1468:	e3e01a01 	mvn	r1, #4096	; 0x1000
    146c:	e1a03aa3 	mov	r3, r3, lsr #21
    1470:	e1a02aa2 	mov	r2, r2, lsr #21
    1474:	e5013fdf 	str	r3, [r1, #-4063]
    1478:	e5012fdf 	str	r2, [r1, #-4063]
			
			// pixel
			
			arke_oif.data_out = image[i*WIDTH+j];
											
			arke_oif.tx = 1;
			arke_oif.eop_out = 1;
			
			stall_go_in = ((GPIO_IN>>10) & 0x1);
    147c:	e5113fdb 	ldr	r3, [r1, #-4059]
			while(stall_go_in != 1) stall_go_in = ((GPIO_IN>>10) & 0x1);
    1480:	e3130b01 	tst	r3, #1024	; 0x400
    1484:	e5de0000 	ldrb	r0, [lr]
    1488:	1a000003 	bne	149c <.text+0x149c>
    148c:	e1a02001 	mov	r2, r1
    1490:	e5123fdb 	ldr	r3, [r2, #-4059]
    1494:	e3130b01 	tst	r3, #1024	; 0x400
    1498:	0afffffc 	beq	1490 <.text+0x1490>
			GPIO_OUT = TO_INTEGER(arke_oif);
			
			arke_oif.tx = 0;
			arke_oif.eop_out = 0;
		
			GPIO_OUT = TO_INTEGER(arke_oif);
    149c:	e28cc001 	add	ip, ip, #1	; 0x1
    14a0:	e3e02a01 	mvn	r2, #4096	; 0x1000
    14a4:	e3801b01 	orr	r1, r0, #1024	; 0x400
    14a8:	e3803c07 	orr	r3, r0, #1792	; 0x700
    14ac:	e35c00c8 	cmp	ip, #200	; 0xc8
    14b0:	e5023fdf 	str	r3, [r2, #-4063]
    14b4:	e28ee001 	add	lr, lr, #1	; 0x1
    14b8:	e5021fdf 	str	r1, [r2, #-4063]
    14bc:	1affffc5 	bne	13d8 <.text+0x13d8>
    14c0:	e3a03d27 	mov	r3, #2496	; 0x9c0
    14c4:	e2877032 	add	r7, r7, #50	; 0x32
    14c8:	e2833004 	add	r3, r3, #4	; 0x4
    14cc:	e1570003 	cmp	r7, r3
    14d0:	e2866001 	add	r6, r6, #1	; 0x1
    14d4:	1affffbb 	bne	13c8 <.text+0x13c8>
			
		}
	}
	
	return 0;

}    14d8:	e3a00000 	mov	r0, #0	; 0x0
    14dc:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
