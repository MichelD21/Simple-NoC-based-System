library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity VGA_Manager is
	port (        
				CLK			: in std_logic;
				
				-- NoC side
				DATA_IN     : in STD_LOGIC_VECTOR(7 downto 0);
				CONTROL_IN  : in STD_LOGIC_VECTOR(2 downto 0);
				DATA_OUT	: out STD_LOGIC_VECTOR(7 downto 0);
				CONTROL_OUT	: out STD_LOGIC_VECTOR(2 downto 0);
				
				-- VGA side
				GO_STALL	: in STD_LOGIC;
				WRITE_E		: out STD_LOGIC;
				ADDRESS		: out STD_LOGIC_VECTOR(15 downto 0);
				PIXEL		: out STD_LOGIC_VECTOR(7 downto 0)
		 );
end VGA_Manager;

architecture Structure of VGA_Manager is

	-- "210" stall_go | tx/rx | eop
	
	signal FLAG		: STD_LOGIC := '0';
	signal STALL_GO	: STD_LOGIC := '0';
	signal COLUMN	: STD_LOGIC_VECTOR(7 downto 0) := x"00";
	signal LINE		: STD_LOGIC_VECTOR(7 downto 0) := x"00";
	
begin

process (clk) 
begin
	if rising_edge(clk) then
		if (CONTROL_IN(1) = '1') then
			if (CONTROL_IN(0) = '1') then
				PIXEL <= DATA_IN;
			else
				if (FLAG = '0') then
					LINE <= DATA_IN;
					FLAG <= '1';
				else
					COLUMN <= DATA_IN;
					FLAG <= '0';
				end if;
			end if;
		end if;
	end if;
end process;

	STALL_GO 	<= not GO_STALL;
	ADDRESS		<= LINE & COLUMN;
	CONTROL_OUT	<= STALL_GO & "00";
	
	WRITE_E		<=	'1' when CONTROL_IN(1) = '1' and CONTROL_IN(0) = '1' and STALL_GO = '1' else
					(others=>'0');
	
end Structure;